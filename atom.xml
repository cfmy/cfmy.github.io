<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>橙风沐雨&#39;s</title>
  
  <subtitle>Muss es sein? Es muss sein!</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2018-11-20T02:07:15.873Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>cfmy</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>NandGame</title>
    <link href="http://yoursite.com/2018/11/20/NandGame/"/>
    <id>http://yoursite.com/2018/11/20/NandGame/</id>
    <published>2018-11-20T01:40:51.000Z</published>
    <updated>2018-11-20T02:07:15.873Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>之前在网上找到的一个逻辑游戏<a href="http://nandgame.com/" target="_blank" rel="noopener">NandGame</a></p><p>它官方介绍是这样的</p><blockquote><p>The Nand Game takes you though building a working computer, starting from the most basic components. It does not require any prerequisites, in particular it does not require any previous knowledge about computer architecture or software, and does not require math skills beyond addition and subtraction. It does require some patience—some of the tasks might take a while to solve.</p></blockquote><p>玩家需要从最开的Nand运算开始(输入两个1时输出0，其他输入均返回1)和Inv运算(取反)，一步步实现And、Or、Xor，后面还要实现寄存器、计数器，最后一步是实现CPU，我自己玩了一下，这里存一下自己的一些答案<br><a id="more"></a></p><h3 id="Inv"><a href="#Inv" class="headerlink" title="Inv"></a>Inv</h3><p><img src="https://cfmyhome-1256032936.cos.ap-shanghai.myqcloud.com/nandgame-1.png" alt=""></p><h3 id="And"><a href="#And" class="headerlink" title="And"></a>And</h3><p><img src="https://cfmyhome-1256032936.cos.ap-shanghai.myqcloud.com/nandgame-2.png" alt=""></p><h3 id="Or"><a href="#Or" class="headerlink" title="Or"></a>Or</h3><p><img src="https://cfmyhome-1256032936.cos.ap-shanghai.myqcloud.com/nandgame-3.png" alt=""></p><h3 id="Xor"><a href="#Xor" class="headerlink" title="Xor"></a>Xor</h3><p><img src="https://cfmyhome-1256032936.cos.ap-shanghai.myqcloud.com/nandgame-4.png" alt=""></p><h3 id="Half-Adder"><a href="#Half-Adder" class="headerlink" title="Half Adder"></a>Half Adder</h3><p><img src="https://cfmyhome-1256032936.cos.ap-shanghai.myqcloud.com/nandgame-5.png" alt=""></p><h3 id="Full-Adder"><a href="#Full-Adder" class="headerlink" title="Full Adder"></a>Full Adder</h3><p><img src="https://cfmyhome-1256032936.cos.ap-shanghai.myqcloud.com/nandgame-6.png" alt=""></p><h3 id="Add-n-dight-numbers"><a href="#Add-n-dight-numbers" class="headerlink" title="Add n dight numbers"></a>Add n dight numbers</h3><p><img src="https://cfmyhome-1256032936.cos.ap-shanghai.myqcloud.com/nandgame-7.png" alt=""></p><h3 id="Zero"><a href="#Zero" class="headerlink" title="Zero"></a>Zero</h3><p><img src="https://cfmyhome-1256032936.cos.ap-shanghai.myqcloud.com/nandgame-8.png" alt=""></p><h3 id="Sub"><a href="#Sub" class="headerlink" title="Sub"></a>Sub</h3><p><img src="https://cfmyhome-1256032936.cos.ap-shanghai.myqcloud.com/nandgame-9.png" alt=""></p><h3 id="Inc"><a href="#Inc" class="headerlink" title="Inc"></a>Inc</h3><p><img src="https://cfmyhome-1256032936.cos.ap-shanghai.myqcloud.com/nandgame-10.png" alt=""></p><h3 id="lt-0"><a href="#lt-0" class="headerlink" title="&lt;0"></a>&lt;0</h3><p><img src="https://cfmyhome-1256032936.cos.ap-shanghai.myqcloud.com/nandgame-11.png" alt=""></p><h3 id="Selector"><a href="#Selector" class="headerlink" title="Selector"></a>Selector</h3><p><img src="https://cfmyhome-1256032936.cos.ap-shanghai.myqcloud.com/nandgame-12.png" alt=""></p><h3 id="Latch"><a href="#Latch" class="headerlink" title="Latch"></a>Latch</h3><p><img src="https://cfmyhome-1256032936.cos.ap-shanghai.myqcloud.com/nandgame-13.png" alt=""></p><h3 id="Data-flip-flop"><a href="#Data-flip-flop" class="headerlink" title="Data flip-flop"></a>Data flip-flop</h3><p><img src="https://cfmyhome-1256032936.cos.ap-shanghai.myqcloud.com/nandgame-14.png" alt=""></p><h3 id="Register"><a href="#Register" class="headerlink" title="Register"></a>Register</h3><p><img src="https://cfmyhome-1256032936.cos.ap-shanghai.myqcloud.com/nandgame-15.png" alt=""></p><h3 id="Counter"><a href="#Counter" class="headerlink" title="Counter"></a>Counter</h3><p><img src="https://cfmyhome-1256032936.cos.ap-shanghai.myqcloud.com/nandgame-16.png" alt=""></p><h3 id="Switch"><a href="#Switch" class="headerlink" title="Switch"></a>Switch</h3><p><img src="https://cfmyhome-1256032936.cos.ap-shanghai.myqcloud.com/nandgame-17.png" alt=""></p><h3 id="RAM"><a href="#RAM" class="headerlink" title="RAM"></a>RAM</h3><p><img src="https://cfmyhome-1256032936.cos.ap-shanghai.myqcloud.com/nandgame-18.png" alt=""></p><h3 id="ALU-input"><a href="#ALU-input" class="headerlink" title="ALU input"></a>ALU input</h3><p><img src="https://cfmyhome-1256032936.cos.ap-shanghai.myqcloud.com/nandgame-19.png" alt=""></p><h3 id="ALU"><a href="#ALU" class="headerlink" title="ALU"></a>ALU</h3><p><img src="https://cfmyhome-1256032936.cos.ap-shanghai.myqcloud.com/nandgame-20.png" alt=""></p><h3 id="Condition"><a href="#Condition" class="headerlink" title="Condition"></a>Condition</h3><p><img src="https://cfmyhome-1256032936.cos.ap-shanghai.myqcloud.com/nandgame-21.png" alt=""></p><h3 id="Combined-State"><a href="#Combined-State" class="headerlink" title="Combined State"></a>Combined State</h3><p><img src="https://cfmyhome-1256032936.cos.ap-shanghai.myqcloud.com/nandgame-22.png" alt=""></p><h3 id="Instruction-Decoder"><a href="#Instruction-Decoder" class="headerlink" title="Instruction Decoder"></a>Instruction Decoder</h3><p><img src="https://cfmyhome-1256032936.cos.ap-shanghai.myqcloud.com/nandgame-23.png" alt=""></p><h3 id="Execution-Engine"><a href="#Execution-Engine" class="headerlink" title="Execution Engine"></a>Execution Engine</h3><p><img src="https://cfmyhome-1256032936.cos.ap-shanghai.myqcloud.com/nandgame-24.png" alt=""></p><h3 id="Program-Engine"><a href="#Program-Engine" class="headerlink" title="Program Engine"></a>Program Engine</h3><p><img src="https://cfmyhome-1256032936.cos.ap-shanghai.myqcloud.com/nandgame-25.png" alt=""></p><h3 id="CPU"><a href="#CPU" class="headerlink" title="CPU"></a>CPU</h3><p><img src="https://cfmyhome-1256032936.cos.ap-shanghai.myqcloud.com/nandgame-26.png" alt=""></p><h2 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h2><p>写这个的时候发现这个网站已经新出了不少新题目了，之前有些可能换了名称</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;之前在网上找到的一个逻辑游戏&lt;a href=&quot;http://nandgame.com/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;NandGame&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;它官方介绍是这样的&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;The Nand Game takes you though building a working computer, starting from the most basic components. It does not require any prerequisites, in particular it does not require any previous knowledge about computer architecture or software, and does not require math skills beyond addition and subtraction. It does require some patience—some of the tasks might take a while to solve.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;玩家需要从最开的Nand运算开始(输入两个1时输出0，其他输入均返回1)和Inv运算(取反)，一步步实现And、Or、Xor，后面还要实现寄存器、计数器，最后一步是实现CPU，我自己玩了一下，这里存一下自己的一些答案&lt;br&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>随笔-键盘驱动级别模拟</title>
    <link href="http://yoursite.com/2018/04/11/%E9%9A%8F%E7%AC%94-%E9%94%AE%E7%9B%98%E9%A9%B1%E5%8A%A8%E7%BA%A7%E5%88%AB%E6%A8%A1%E6%8B%9F/"/>
    <id>http://yoursite.com/2018/04/11/随笔-键盘驱动级别模拟/</id>
    <published>2018-04-11T08:57:24.000Z</published>
    <updated>2018-04-12T07:26:00.446Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>上个月央行征信改版导致登陆需要安装密码控件，这一改可把我折腾坏了，还是第一次处理控件登陆的问题，临时学习了很多，踩了很多坑，目前终于稳定能使用了，这里大概记一下经历<br><a id="more"></a></p><h2 id="ActiveX控件"><a href="#ActiveX控件" class="headerlink" title="ActiveX控件"></a>ActiveX控件</h2><p>我等日常最常用都接触过的浏览器控件就是Flash，全名是<em>Adobe Flash Player</em>，我记得这个空间的身板还不小，大概二百兆，而且不同浏览器还要下载不同的版本，之前还曝光说他有不少安全漏洞，再加上总是不定期升级，可以说是用户体验极差了，感觉Flash控件之后一定会慢慢被H5取代</p><p>其实ActiveX控件这东西人如其名，就类似windows桌面程序中的各种控件，微软之前把他设计为可以嵌入在浏览器中，并给这个方向的控件起了个名字<strong>OCX</strong> 对象类别扩充组件（Object Linking and Embedding (OLE) Control Extension），后来随着网络越来越发达，逐渐发展为ActiveX，关于这个过程可以参考<a href="https://www.cnblogs.com/olawonzhu/articles/1683424.html" target="_blank" rel="noopener">OLE、OCX和ActiveX控件之间的比较 - OlawonZhu - 博客园</a></p><p>从ActiveX的设计初衷来看，还是很有想法的，把浏览器页面当做载体，然后在页面内部启用控件，相当于浏览器里面嵌入一个自定义的程序，而其他网站也可以引用这个控件，不止实现了复用，更重要的是把丰富浏览器行为这个权利分配给了所有开发者，是一个不错的方向</p><p>然而时代日新月异，面对新的浏览器甚至新的操作系统以及移动端的兴起，更重要的是Web的性质变化-Web必须承载更多的使命。ActiveX控件的弊端慢慢变得越来越尖锐，尖锐的无法接受，我觉得最大的弊端有两点：1无法跨平台<br>2必须安装后才可以使用</p><p>ActiveX技术已经变成了时代的眼泪，现在很多控件也就只有IE浏览器还可以支持使用。央行征信这次改为控件输入密码也是够狠的，意味着以后查征信报告必须要在windows平台使用IE浏览器才可以</p><h2 id="JS分析"><a href="#JS分析" class="headerlink" title="JS分析"></a>JS分析</h2><p>以下是央行登陆页面部分JS代码<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line">&lt;script type=<span class="string">"text/javascript"</span>&gt;</span><br><span class="line">   <span class="keyword">var</span> pgeditor = <span class="keyword">new</span> $.pge(&#123;</span><br><span class="line">pgePath : <span class="string">"http://file.zhongdengwang.com/ocx/"</span>,<span class="comment">//控件下载目录，可以指定绝对路径，如"http://www.baidu.com/download/"</span></span><br><span class="line">pgeId : <span class="string">"pass"</span>,<span class="comment">//控件id</span></span><br><span class="line">pgeEdittype : <span class="number">0</span>,<span class="comment">//控件显示类型,0(星号),1(明文)</span></span><br><span class="line">pgeEreg1 : <span class="string">"[\\s\\S]*"</span>,<span class="comment">//输入过程中字符类型限制，如"[0-9]*"表示只能输入数字</span></span><br><span class="line">pgeEreg2 : <span class="string">"[\\s\\S]&#123;6,12&#125;"</span>,<span class="comment">//输入完毕后字符类型判断条件，与pgeditor.pwdValid()方法对应</span></span><br><span class="line">pgeMaxlength : <span class="number">20</span>,<span class="comment">//允许最大输入长度</span></span><br><span class="line">pgeTabindex : <span class="number">2</span>,<span class="comment">//tab键顺序</span></span><br><span class="line"><span class="comment">//pgeCert : "3081890281810092D9D8D04FB5F8EF9B8374F21690FD46FDBF49B40EECCDF416B4E2AC2044B0CFE3BD67EB4416B26FD18C9D3833770A526FD1AB66A83ED969AF74238D6C900403FC498154EC74EAF420E7338675CAD7F19332B4A56BE4FF946B662A3C2D217EFBE4DC646FB742B8C62BFE8E25FD5DC59E7540695FA8B9CD5BFD9F92DFAD009D230203010001",</span></span><br><span class="line">pgeCert:<span class="string">"3082010A0282010100A5875466E166609505D3BB4C51B03F8722F59FA317A2CDC94D83F85335F01EF986DA43C0FC02FDB056DE0DCD24D70F7755CF4D130D92B0AC347CD3AE69434E74212B57819867BC3AF6CFB5D343544082AA72A4751843305EF83417635D93CDE2B5DF8572FADB1CB56491D41368020AE787B2F6DE1D42193BF57B041198AF54A3878941F68ACE018634663D6E211D587BC373954A8C00425838493CB828E2493DF3DB2653C8E46399F88AB453D217A7FFD628A3F12BD0C4BAB9555C095C1013C60F2ADF1DCEF1845D764EFD2A25084A27B3FEC5B8121B08F8F94F4F14146F43BC2AF93C406EDE8F1DAE717FC512FF4B08E0D05A7223A5F8548FC14A6D9CF6E4030203010001"</span>,</span><br><span class="line">pgeClass : <span class="string">"ocx_style"</span>,<span class="comment">//控件css样式</span></span><br><span class="line">pgeInstallClass : <span class="string">"ocx_style"</span>,<span class="comment">//针对安装或升级的css样式</span></span><br><span class="line">pgeOnkeydown :<span class="string">"FormSubmit()"</span>,<span class="comment">//回车键响应函数，需焦点在控件中才能响应</span></span><br><span class="line">   <span class="comment">//tabCallback : "input2",//火狐tab键回调函数,设置要跳转到的对象ID</span></span><br><span class="line">    pgeOnfocus:<span class="string">"pgeFocus()"</span>,<span class="comment">//监控光标切入密码控件框</span></span><br><span class="line">    pgeOnblur:<span class="string">"pgeBlur()"</span>,<span class="comment">//监控光标切出密码控件框</span></span><br><span class="line">   <span class="comment">//windows10 edge&amp;Chrome42+相关</span></span><br><span class="line">    pgeWindowID:<span class="string">"password"</span>+<span class="keyword">new</span> <span class="built_in">Date</span>().getTime()+<span class="number">1</span>,</span><br><span class="line">    pgeRZRandNum:<span class="string">"24116953564831466890207747235682"</span>,</span><br><span class="line">    pgeRZDataB:<span class="string">"zQhsRAHO06GuBFEIdZVOZw7Ro3biBdTHnARJruWMYi4="</span></span><br><span class="line">&#125;);</span><br><span class="line"><span class="built_in">window</span>.pgeCtrl = pgeditor;</span><br><span class="line"><span class="keyword">var</span> i = <span class="number">0</span>;</span><br><span class="line"><span class="comment">//密码控件获得焦点时，提示一下</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">pgeFocus</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">$(<span class="string">"#tishi"</span>).css(<span class="string">'display'</span>,<span class="string">'block'</span>);</span><br><span class="line">$(<span class="string">"#passwordInfo"</span>).css(<span class="string">'display'</span>,<span class="string">'none'</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//密码控件失去焦点时获得密码强度，并展示出来</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">pgeBlur</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">$(<span class="string">"#tishi"</span>).css(<span class="string">'display'</span>,<span class="string">'none'</span>);</span><br><span class="line">$(<span class="string">"#passwordInfo"</span>).css(<span class="string">'display'</span>,<span class="string">'block'</span>);</span><br><span class="line">checkPassword();</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">   $(<span class="string">"#login"</span>).focus();</span><br><span class="line">   pgeditor.pgInitialize();</span><br><span class="line">   $(<span class="string">"lic"</span>).html(pgeditor.setLicense());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//登录集成演示页面提交表单的方法</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">FormSubmit</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">$.ajax(&#123;</span><br><span class="line">   cache:<span class="literal">false</span>,</span><br><span class="line">        type:<span class="string">"post"</span>,</span><br><span class="line">        <span class="keyword">async</span>:<span class="literal">false</span>,</span><br><span class="line">url:basepath+<span class="string">"userReg.do?method=getSrandNum&amp;num="</span>+<span class="built_in">Math</span>.random(),</span><br><span class="line">dataType:<span class="string">"text"</span>,</span><br><span class="line">success:<span class="function"><span class="keyword">function</span>(<span class="params">result</span>)</span>&#123;</span><br><span class="line"><span class="comment">//alert("*****"+result);</span></span><br><span class="line">pgeditor.pwdSetSk(result);<span class="comment">//给控件设置随机因子</span></span><br><span class="line">&#125;</span><br><span class="line">  &#125;);</span><br><span class="line"><span class="keyword">var</span> pwdResult = pgeditor.pwdResultRSA();<span class="comment">//获取密码AES+RSA密文</span></span><br><span class="line"><span class="keyword">var</span> machineNetwork = pgeditor.machineNetwork();<span class="comment">//获取网卡信息密文</span></span><br><span class="line"><span class="keyword">var</span> machineDisk = pgeditor.machineDisk();<span class="comment">//获取硬盘信息密文</span></span><br><span class="line"><span class="keyword">var</span> machineCPU = pgeditor.machineCPU();<span class="comment">//获取CPU信息密文</span></span><br><span class="line">$(<span class="string">"#password"</span>).val(pwdResult);<span class="comment">//将密码密文赋值给表单</span></span><br><span class="line">$(<span class="string">"#pass"</span>).val(pwdResult);</span><br><span class="line">&#125;</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure></p><p>从它页面JS可以看出来应该是通过先填充几个ID之类的字段获取一个随机因子，给控件初始化用掉随机因子，然后几个字段和密码组合在调用控件的加密方法，赋值给密码input标签，最后提交表单</p><h2 id="键盘驱动级别模拟"><a href="#键盘驱动级别模拟" class="headerlink" title="键盘驱动级别模拟"></a>键盘驱动级别模拟</h2><p>在ActiveX控件中使用C# 的SendInput或者是调win32.dll的 keybd_event 都是无法输入的，因为ActiveX控件本质就是windows小程序，他的权限其实是非常大的，这里推测是他在底层挂了键盘钩子，然后把消息中断了，使按键无法被上层其他程序捕获，猜测依据就是他在web的JS文件中的密码窗体获取焦点和失去焦点事件中操作了一个Interval调用了一个控件的intervlOut方法</p><p>关于windows键盘消息队列相关内容请看引用，这里不在赘述，也不打算继续深入</p><p>目前网络上能找的驱动级别键盘模拟dll有三个，WinIO、WinRang0以及DD</p><ul><li>WinIO及WinRang0是国外很早流传的两个dll，年代大概在2006年左右，网上相关资料已经非常少了，使用条件极其苛刻，需要在windows测试模式下安装一个驱动证书，依赖 i8042prt.sys 驱动-PS/2键盘驱动，而且这个驱动还是即插即启动的那种，意味着要想使用必须连着PS/2键盘</li><li><a href="http://www.ddxoft.com/" target="_blank" rel="noopener">DD</a>是国人开发的一个dll，下载包内甚至包含了C#，Java，Python等语言使用Demo，内部实现了自己的驱动数字签名，可以直接加载使用，但是缺点是免费版会篡改IE主页，加载使用时必须要联网初始化，安全性不一定多可靠</li></ul><p>因为要在服务器发布，可以只能使用后者了，但是键盘驱动模拟有个很有意思的坑，就是远程连接上去发布退出时无效的-键盘模拟输入无效，但是通过服务器控制台登陆再退出就可以正常使用，这点我推测和连接原理有关系，可能不同的连接后再退出后是服务器保持了不同的状态，这点确实很坑</p><h2 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h2><ul><li>当程序实现后发现也没有多少代码，主要是寻找可靠地解决方案，不停地查资料比较费时间和脑力，这种问题没有相关经验真的是不到最后一刻稳定运行都不能确定能否成功解决</li><li>感觉自己解决问题的途径太少，以后还需要积累</li></ul><h2 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h2><blockquote><p><a href="https://www.cnblogs.com/chengchen/archive/2010/03/24/1694260.html" target="_blank" rel="noopener">驱动级键盘模拟（C#）（高手请飘过） - 程晨 - 博客园</a><br><a href="https://www.douban.com/note/318793892/" target="_blank" rel="noopener">Windows键盘驱动结构与消息机制</a>  </p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;上个月央行征信改版导致登陆需要安装密码控件，这一改可把我折腾坏了，还是第一次处理控件登陆的问题，临时学习了很多，踩了很多坑，目前终于稳定能使用了，这里大概记一下经历&lt;br&gt;
    
    </summary>
    
    
      <category term="键盘驱动" scheme="http://yoursite.com/tags/%E9%94%AE%E7%9B%98%E9%A9%B1%E5%8A%A8/"/>
    
      <category term="ActiveX" scheme="http://yoursite.com/tags/ActiveX/"/>
    
  </entry>
  
  <entry>
    <title>浅谈JS闭包</title>
    <link href="http://yoursite.com/2018/02/26/%E6%B5%85%E8%B0%88JS%E9%97%AD%E5%8C%85/"/>
    <id>http://yoursite.com/2018/02/26/浅谈JS闭包/</id>
    <published>2018-02-26T02:36:24.000Z</published>
    <updated>2018-04-11T08:40:29.806Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>JavaScript 闭包笔记，闭包在我看来只是一个噱头，实际用处肯定不大。因为在我看来，语法容易理解的东西拼接成复杂也好简单也好的逻辑才是程序该有的样子，而闭包只有有点绕，但是自己推敲下，发现不过也就是这么回事的东西</p><p>此文结合<a href="http://www.runoob.com/js/js-function-closures.html" target="_blank" rel="noopener">菜鸟驿站</a>的计数器问题做个笔记</p><a id="more"></a><h2 id="引"><a href="#引" class="headerlink" title="引"></a>引</h2><p>如果想在JS中设计一个全局计数器，可以写如下方法</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> counter = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">add</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="keyword">return</span> counter += <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">add();</span><br><span class="line">add();</span><br><span class="line">add();</span><br><span class="line"> </span><br><span class="line"><span class="comment">// 计数器现在为 3</span></span><br></pre></td></tr></table></figure><p>这个写法很简单，但是缺点也很明显，counter作为全局变量暴漏在外，不是一个<strong>优秀</strong>的设计习惯，那如果在函数内部声明counter呢？不用想就知道不行，那样每次调用函数都会初始化一次，遍无法计数</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">add</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="keyword">var</span> counter = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">return</span> counter += <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">add();</span><br><span class="line">add();</span><br><span class="line">add();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 本意是想输出 3, 但事与愿违，输出的都是 1 !</span></span><br></pre></td></tr></table></figure><blockquote><p>所有函数都能访问全局变量。  </p><p>实际上，在 JavaScript 中，所有函数都能访问它们上一层的作用域。</p><p>JavaScript 支持嵌套函数。嵌套函数可以访问上一层的函数变量。</p></blockquote><p>那么如果设计一个嵌套函数，外层初始化counter，内层累加，问题就解决了，提前是外部可以直接调用嵌套函数</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">add</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> counter = <span class="number">0</span>;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">plus</span>(<span class="params"></span>) </span>&#123;counter += <span class="number">1</span>;&#125;</span><br><span class="line">    plus();    </span><br><span class="line">    <span class="keyword">return</span> counter; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>如果我们能在外部访问 plus() 函数，这样就能解决计数器的困境。</p><p>我们同样需要确保 counter = 0 只执行一次。</p><p>我们需要闭包。</p></blockquote><h2 id="闭包"><a href="#闭包" class="headerlink" title="闭包"></a>闭包</h2><p>菜鸟驿站直接给出了实现了闭包代码如下</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> add = (<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> counter = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;<span class="keyword">return</span> counter += <span class="number">1</span>;&#125;</span><br><span class="line">&#125;)();</span><br><span class="line"> </span><br><span class="line">add();</span><br><span class="line">add();</span><br><span class="line">add();</span><br><span class="line"> </span><br><span class="line"><span class="comment">// 计数器为 3</span></span><br></pre></td></tr></table></figure><blockquote><p>变量 add 指定了函数自我调用的返回字值。</p><p>自我调用函数只执行一次。设置计数器为 0。并返回函数表达式。</p><p>add变量可以作为一个函数使用。非常棒的部分是它可以访问函数上一层作用域的计数器。</p><p>这个叫作 JavaScript 闭包。它使得函数拥有私有变量变成可能。</p><p>计数器受匿名函数的作用域保护，只能通过 add 方法修改。</p></blockquote><p>我觉得这段代码有点太故弄玄虚了，让人一眼看上去觉得很难理解，我按照自己的思路分析一下从嵌套到闭包的过程</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">add</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> counter = <span class="number">0</span>;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">plus</span>(<span class="params"></span>) </span>&#123;counter += <span class="number">1</span>;&#125;</span><br><span class="line">    plus();    </span><br><span class="line">    <span class="keyword">return</span> counter; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这是之前的嵌套函数，他的问题在于外部无法调用<em>plus()</em>方法，我将其改成返回<em>plus()</em>方法</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">add</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> counter = <span class="number">0</span>;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">plus</span>(<span class="params"></span>) </span>&#123;counter += <span class="number">1</span>;&#125;</span><br><span class="line">    <span class="keyword">return</span> plus; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>就变成这鸟样了，但是plus方法没有返回值，我想要的counter，所以再改一下，让plus方法返回counter+1</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">add</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> counter = <span class="number">0</span>;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">plus</span>(<span class="params"></span>) </span>&#123;<span class="keyword">return</span> counter += <span class="number">1</span>;&#125;</span><br><span class="line">    <span class="keyword">return</span> plus; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意，这个时候闭包已经实现了，为什么这么说呢？</p><ol><li>add()方法中初始化了counter，返回了plus()方法，这样外部可以直接调用plus()方法</li><li>plus()可以直接实现累加，他不会再去初始化一遍counter了</li></ol><p>这段代码调用如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">add</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> counter = <span class="number">0</span>;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">plus</span>(<span class="params"></span>) </span>&#123;<span class="keyword">return</span> counter += <span class="number">1</span>;&#125;</span><br><span class="line">    <span class="keyword">return</span> plus; </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> plus = add();<span class="comment">//初始化一次counter</span></span><br><span class="line">plus();<span class="comment">//1</span></span><br><span class="line">plus();<span class="comment">//2</span></span><br><span class="line">plus();<span class="comment">//3</span></span><br></pre></td></tr></table></figure><p>简化一下代码，不要plus名字了，返回匿名方法</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">add</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> counter = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;<span class="keyword">return</span> counter += <span class="number">1</span>;&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> plus = add();<span class="comment">//初始化一次counter</span></span><br><span class="line">plus();<span class="comment">//1</span></span><br><span class="line">plus();<span class="comment">//2</span></span><br><span class="line">plus();<span class="comment">//3</span></span><br></pre></td></tr></table></figure><p>每次手动初始化一遍太麻烦，利用函数的<strong>自我调用</strong>再次修改一下代码就变成了最终版</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> add = (<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> counter = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;<span class="keyword">return</span> counter += <span class="number">1</span>;&#125;</span><br><span class="line">&#125;)();<span class="comment">//这里执行一遍自己，并返回计数方法给add</span></span><br><span class="line"></span><br><span class="line">add();<span class="comment">//1</span></span><br><span class="line">add();<span class="comment">//2</span></span><br><span class="line">add();<span class="comment">//3</span></span><br></pre></td></tr></table></figure><h2 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h2><ol><li>闭包就是利用嵌套函数，外层初始化变量，内层处理变量，然后外层返回内层方法</li><li>JS特性就是这种情况下，虽然是函数内的变量，但是函数结束不会被回收，因为返回的嵌套函数仍然会用到它，从而巧妙的隐藏了变量在函数内</li><li>论私有的重要性</li></ol>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;JavaScript 闭包笔记，闭包在我看来只是一个噱头，实际用处肯定不大。因为在我看来，语法容易理解的东西拼接成复杂也好简单也好的逻辑才是程序该有的样子，而闭包只有有点绕，但是自己推敲下，发现不过也就是这么回事的东西&lt;/p&gt;
&lt;p&gt;此文结合&lt;a href=&quot;http://www.runoob.com/js/js-function-closures.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;菜鸟驿站&lt;/a&gt;的计数器问题做个笔记&lt;/p&gt;
    
    </summary>
    
    
      <category term="学习笔记" scheme="http://yoursite.com/tags/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
      <category term="JavaScript" scheme="http://yoursite.com/tags/JavaScript/"/>
    
      <category term="闭包" scheme="http://yoursite.com/tags/%E9%97%AD%E5%8C%85/"/>
    
  </entry>
  
  <entry>
    <title>C#实现跳一跳辅助</title>
    <link href="http://yoursite.com/2018/02/23/C-%E5%AE%9E%E7%8E%B0%E8%B7%B3%E4%B8%80%E8%B7%B3%E8%BE%85%E5%8A%A9/"/>
    <id>http://yoursite.com/2018/02/23/C-实现跳一跳辅助/</id>
    <published>2018-02-23T01:29:03.000Z</published>
    <updated>2018-11-19T14:50:41.377Z</updated>
    
    <content type="html"><![CDATA[<blockquote class="blockquote-center"><p>微信跳一跳小程序原理比较简单，抛开声音要素，跳的距离与拇指按压时间成正比例，假设每次跳动距离都等于拇指按压时间*常数系数，这个游戏就变成了根据跳动距离求解按压时间，于是乎我在PC端用安卓模拟器和C#实现了一个跳一跳辅助程序</p></blockquote><a id="more"></a><h1 id="需求分析"><a href="#需求分析" class="headerlink" title="需求分析"></a>需求分析</h1><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p><img src="https://cfmyhome-1256032936.cos.ap-shanghai.myqcloud.com/QQ%E6%88%AA%E5%9B%BE20180223135910.bmp?imageView2/2/w/250/h/400" alt=""></p><ol><li>在模拟器确定起点和终点的位置坐标，勾股定理算出两点距离</li><li>一个可以实时调节大小的系数，乘以距离算出鼠标按压时间</li><li>根据算出的按压时间模拟鼠标按压动作</li></ol><h2 id="可行性"><a href="#可行性" class="headerlink" title="可行性"></a>可行性</h2><p><em>针对上述1</em>：如果想实现完全自动跳跃，肯定要用到图像匹配，从跳一跳界面来看，起点旗子的图形是固定的紫色象棋，想确定位置比较容易</p><p>终点的图形是新落的方块，这个方块素材目前看来官方会不断更新，如果想通过维护一个图形素材库，用来匹配终点的话非常麻烦。那么通过分解图像算出来呢？新落下的方块总是出现在界面左上或右上方，可以先取界面角落的像素点确定背景色（因为背景色会变化，需要每次起跳前确认），然后从界面左上至右下遍历像素点，比较与背景色的色差，先出现色差的区域既是新落下方块的坐标区域，这样可以吗？很难实现，首先方块颜色不是单色的，简单的根据色差判断轮廓很可能不准确，其次知道了轮廓想要确定方块顶层区域也是很有难度的</p><p>所以我采用半自动方式，利用人确定终点位置，人为鼠标挪到终点右键一下，记录下终点坐标，简单粗暴就是累点</p><p><em>针对上述2</em>：需要一个控件，每次起跳前读这里的数字</p><p><em>针对上述3</em>：调用win32接口，鼠标移动至界面内，鼠标左键按下，线程休眠xx毫秒，鼠标左键松开</p><h1 id="最终效果"><a href="#最终效果" class="headerlink" title="最终效果"></a>最终效果</h1><p><img src="https://cfmyhome-1256032936.cos.ap-shanghai.myqcloud.com/QQ%E5%9B%BE%E7%89%8720180223135615.png?imageView2/1/w/650/h/500" alt=""></p><p><img src="https://cfmyhome-1256032936.cos.ap-shanghai.myqcloud.com/QQ%E6%88%AA%E5%9B%BE20180223141053.png?imageView2/2/w/400/h/600" alt=""></p><p><img src="https://cfmyhome-1256032936.cos.ap-shanghai.myqcloud.com/20180223_143630.gif" alt=""></p><h1 id="具体实现"><a href="#具体实现" class="headerlink" title="具体实现"></a>具体实现</h1><h2 id="图像匹配"><a href="#图像匹配" class="headerlink" title="图像匹配"></a>图像匹配</h2><p>这里图像匹配指的是在一个大图A中找到小图B的位置，可能是多个或一个坐标，我之前并没有处理过图像相关，所以只能在网上看人家怎么实现的，在网上找了一个比较靠谱的例子，但他只找了单个匹配结果，我改成了找多个匹配结果，具体代码如下</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span>  </span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> 判断图形里是否存在另外一个图形 所在行的索引  </span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span>  </span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name="p_Source"&gt;</span>原始图形数据<span class="doctag">&lt;/param&gt;</span>  </span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name="p_Part"&gt;</span>小图形数据<span class="doctag">&lt;/param&gt;</span>  </span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name="p_SourceIndex"&gt;</span>开始位置<span class="doctag">&lt;/param&gt;</span>  </span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name="p_SourceWidth"&gt;</span>原始图形宽<span class="doctag">&lt;/param&gt;</span>  </span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name="p_PartWidth"&gt;</span>小图宽<span class="doctag">&lt;/param&gt;</span>  </span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name="p_Float"&gt;</span>溶差<span class="doctag">&lt;/param&gt;</span>  </span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;returns&gt;</span>所在行的索引 如果找不到返回-1<span class="doctag">&lt;/returns&gt;</span>  </span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">GetImageContains</span>(<span class="params"><span class="keyword">byte</span>[] p_Source, <span class="keyword">byte</span>[] p_Part, <span class="keyword">int</span> p_SourceIndex, <span class="keyword">int</span> p_SourceWidth, <span class="keyword">int</span> p_PartWidth, <span class="keyword">int</span> p_Float</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> _PartIndex = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> _SourceIndex = p_SourceIndex;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; p_SourceWidth; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (p_SourceWidth - i &lt; p_PartWidth) <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">        <span class="comment">//这里放弃构造Color类，因为太耗时了，为了效率连自建color结构都不搞了，直接比较RGB三色的字节</span></span><br><span class="line">        <span class="comment">//Color _CurrentlyColor = Color.FromArgb(p_Source[_SourceIndex + 3], p_Source[_SourceIndex + 2], p_Source[_SourceIndex + 1], p_Source[_SourceIndex]);</span></span><br><span class="line">        <span class="comment">//Color _CompareColoe = Color.FromArgb(p_Part[3], p_Part[2], p_Part[1], p_Part[0]);</span></span><br><span class="line">        _SourceIndex += <span class="number">4</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">bool</span> _ScanColor = ScanColor(p_Source[_SourceIndex + <span class="number">2</span>], p_Source[_SourceIndex + <span class="number">1</span>], p_Source[_SourceIndex], p_Part[<span class="number">2</span>], p_Part[<span class="number">1</span>], p_Part[<span class="number">0</span>], p_Float);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (_ScanColor)</span><br><span class="line">        &#123;</span><br><span class="line">            _PartIndex += <span class="number">4</span>;</span><br><span class="line">            <span class="keyword">int</span> _SourceRVA = _SourceIndex;</span><br><span class="line">            <span class="keyword">bool</span> _Equals = <span class="literal">true</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> z = <span class="number">0</span>; z != p_PartWidth - <span class="number">1</span>; z++)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="comment">//_CurrentlyColor = Color.FromArgb(p_Source[_SourceRVA + 3], p_Source[_SourceRVA + 2], p_Source[_SourceRVA + 1], p_Source[_SourceRVA]);</span></span><br><span class="line">                <span class="comment">//_CompareColoe = Color.FromArgb(p_Part[_PartIndex + 3], p_Part[_PartIndex + 2], p_Part[_PartIndex + 1], p_Part[_PartIndex]);</span></span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> (!ScanColor(p_Source[_SourceRVA + <span class="number">2</span>], p_Source[_SourceRVA + <span class="number">1</span>], p_Source[_SourceRVA], p_Part[_PartIndex + <span class="number">2</span>], p_Part[_PartIndex + <span class="number">1</span>], p_Part[_PartIndex], p_Float))</span><br><span class="line">                &#123;</span><br><span class="line">                    _PartIndex = <span class="number">0</span>;</span><br><span class="line">                    _Equals = <span class="literal">false</span>;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                _PartIndex += <span class="number">4</span>;</span><br><span class="line">                _SourceRVA += <span class="number">4</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (_Equals) <span class="keyword">return</span> i;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            _PartIndex = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span>  </span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> 检查色彩(可以根据这个更改比较方式  </span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span>  </span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name="p_CurrentlyColor"&gt;</span>当前色彩<span class="doctag">&lt;/param&gt;</span>  </span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name="p_CompareColor"&gt;</span>比较色彩<span class="doctag">&lt;/param&gt;</span>  </span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name="p_Float"&gt;</span>溶差<span class="doctag">&lt;/param&gt;</span>  </span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;returns&gt;</span><span class="doctag">&lt;/returns&gt;</span>  </span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">bool</span> <span class="title">ScanColor</span>(<span class="params"><span class="keyword">byte</span> source_R, <span class="keyword">byte</span> source_G, <span class="keyword">byte</span> source_B, <span class="keyword">byte</span> part_R, <span class="keyword">byte</span> part_G, <span class="keyword">byte</span> part_B, <span class="keyword">int</span> p_Float</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//int _R = p_CurrentlyColor.R;</span></span><br><span class="line">    <span class="comment">//int _G = p_CurrentlyColor.G;</span></span><br><span class="line">    <span class="comment">//int _B = p_CurrentlyColor.B;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> (source_R &lt;= part_R + p_Float &amp;&amp; source_R &gt;= part_R - p_Float)</span><br><span class="line">        &amp;&amp; (source_G &lt;= part_G + p_Float &amp;&amp; source_G &gt;= part_G - p_Float)</span><br><span class="line">        &amp;&amp; (source_B &lt;= part_B + p_Float &amp;&amp; source_B &gt;= part_B - p_Float);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span>  </span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> 判断图形里是否存在另外一个图形 并返回所在位置  </span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span>  </span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name="p_SourceBitmap"&gt;</span>原始图形<span class="doctag">&lt;/param&gt;</span>  </span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name="p_PartBitmap"&gt;</span>小图形<span class="doctag">&lt;/param&gt;</span>  </span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name="p_Float"&gt;</span>溶差<span class="doctag">&lt;/param&gt;</span>  </span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;returns&gt;</span>坐标<span class="doctag">&lt;/returns&gt;</span>  </span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> List&lt;Point&gt; <span class="title">GetAllPoints</span>(<span class="params">Bitmap p_SourceBitmap, Bitmap p_PartBitmap, <span class="keyword">int</span> p_Float</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">var</span> pointList = <span class="keyword">new</span> List&lt;Point&gt;();</span><br><span class="line">    <span class="keyword">int</span> _SourceWidth = p_SourceBitmap.Width;</span><br><span class="line">    <span class="keyword">int</span> _SourceHeight = p_SourceBitmap.Height;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> _PartWidth = p_PartBitmap.Width;</span><br><span class="line">    <span class="keyword">int</span> _PartHeight = p_PartBitmap.Height;</span><br><span class="line"></span><br><span class="line">    Bitmap _SourceBitmap = <span class="keyword">new</span> Bitmap(_SourceWidth, _SourceHeight);</span><br><span class="line">    Graphics _Graphics = Graphics.FromImage(_SourceBitmap);</span><br><span class="line">    _Graphics.DrawImage(p_SourceBitmap, <span class="keyword">new</span> System.Drawing.Rectangle(<span class="number">0</span>, <span class="number">0</span>, _SourceWidth, _SourceHeight));</span><br><span class="line">    _Graphics.Dispose();</span><br><span class="line"></span><br><span class="line">    BitmapData _SourceData = _SourceBitmap.LockBits(<span class="keyword">new</span> System.Drawing.Rectangle(<span class="number">0</span>, <span class="number">0</span>, _SourceWidth, _SourceHeight), ImageLockMode.ReadWrite, System.Drawing.Imaging.PixelFormat.Format32bppArgb);</span><br><span class="line">    <span class="keyword">byte</span>[] _SourceByte = <span class="keyword">new</span> <span class="keyword">byte</span>[_SourceData.Stride * _SourceHeight];</span><br><span class="line">    Marshal.Copy(_SourceData.Scan0, _SourceByte, <span class="number">0</span>, _SourceByte.Length);  <span class="comment">//复制出p_SourceBitmap的相素信息   </span></span><br><span class="line">    _SourceBitmap.UnlockBits(_SourceData);</span><br><span class="line"></span><br><span class="line">    Bitmap _PartBitmap = <span class="keyword">new</span> Bitmap(_PartWidth, _PartHeight);</span><br><span class="line">    _Graphics = Graphics.FromImage(_PartBitmap);</span><br><span class="line">    _Graphics.DrawImage(p_PartBitmap, <span class="keyword">new</span> System.Drawing.Rectangle(<span class="number">0</span>, <span class="number">0</span>, _PartWidth, _PartHeight));</span><br><span class="line">    _Graphics.Dispose();</span><br><span class="line">    BitmapData _PartData = _PartBitmap.LockBits(<span class="keyword">new</span> System.Drawing.Rectangle(<span class="number">0</span>, <span class="number">0</span>, _PartWidth, _PartHeight), ImageLockMode.ReadWrite, System.Drawing.Imaging.PixelFormat.Format32bppArgb);</span><br><span class="line">    <span class="keyword">byte</span>[] _PartByte = <span class="keyword">new</span> <span class="keyword">byte</span>[_PartData.Stride * _PartHeight];</span><br><span class="line">    Marshal.Copy(_PartData.Scan0, _PartByte, <span class="number">0</span>, _PartByte.Length);   <span class="comment">//复制出p_PartBitmap的相素信息   </span></span><br><span class="line">    _PartBitmap.UnlockBits(_PartData);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//匹配基本思路如下</span></span><br><span class="line">    <span class="comment">//1. 先遍历原图Y坐标</span></span><br><span class="line">    <span class="comment">//2.    遍历匹配图Y坐标AS目标坐标</span></span><br><span class="line">    <span class="comment">//3.        找出该行完全匹配的X坐标，如果没有，原图Y+1，重复步骤1</span></span><br><span class="line">    <span class="comment">//          如果成功找到X，目标坐标Y+1，再次匹配，但是X值必须一致，直至目标Y最大，匹配结束</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> _PointY = <span class="number">0</span>; _PointY != _SourceHeight; _PointY++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (_SourceHeight - _PointY &lt; _PartHeight) <span class="keyword">break</span>;  <span class="comment">//如果 剩余的高 比需要比较的高 还要小 就直接返回               </span></span><br><span class="line">        <span class="keyword">int</span> _PointX = <span class="number">-1</span>;    <span class="comment">//临时存放坐标 需要保证找到的是在一个X点上  </span></span><br><span class="line">        <span class="keyword">bool</span> _SacnOver = <span class="literal">true</span>;   <span class="comment">//是否都比配的上  </span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> z = <span class="number">0</span>; z != _PartHeight - <span class="number">1</span>; z++)       <span class="comment">//循环目标进行比较  </span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span> _TrueX = GetImageContains(_SourceByte, _PartByte, _PointY * _SourceData.Stride, _SourceWidth, _PartWidth, p_Float);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (_TrueX == <span class="number">-1</span>)   <span class="comment">//如果没找到   </span></span><br><span class="line">            &#123;</span><br><span class="line">                _PointX = <span class="number">-1</span>;    <span class="comment">//设置坐标为没找到  </span></span><br><span class="line">                _SacnOver = <span class="literal">false</span>;   <span class="comment">//设置不进行返回  </span></span><br><span class="line">                <span class="comment">//_SourceByte = _SourceByte.Skip(_SourceData.Stride).ToArray();</span></span><br><span class="line">                <span class="comment">//_SourceHeight = _SourceHeight - 1;</span></span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span> (z == <span class="number">0</span>) _PointX = _TrueX;</span><br><span class="line">                <span class="keyword">if</span> (_PointX != _TrueX)   <span class="comment">//如果找到了 也的保证坐标和上一行的坐标一样 否则也返回  </span></span><br><span class="line">                &#123;</span><br><span class="line">                    _PointX = <span class="number">-1</span>;<span class="comment">//设置坐标为没找到  </span></span><br><span class="line">                    _SacnOver = <span class="literal">false</span>;  <span class="comment">//设置不进行返回  </span></span><br><span class="line">                    <span class="comment">//_SourceByte = _SourceByte.Skip(_SourceData.Stride).ToArray();</span></span><br><span class="line">                    <span class="comment">//_SourceHeight = _SourceHeight - 1;</span></span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (_SacnOver)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">//加入集合</span></span><br><span class="line">            pointList.Add(<span class="keyword">new</span> Point(_PointX, _PointY));</span><br><span class="line">            <span class="comment">//矩形涂黑</span></span><br><span class="line">            <span class="keyword">var</span> tmpX = _PointX + _PartWidth;</span><br><span class="line">            <span class="keyword">var</span> tmpY = _PointY + _PartHeight;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> y = <span class="number">0</span>; y &lt; tmpY; y++)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> x = <span class="number">0</span>; x &lt; tmpX; x++)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">var</span> index = y * _SourceData.Stride + x * <span class="number">4</span>;</span><br><span class="line">                    _SourceByte[index] = <span class="number">255</span>;</span><br><span class="line">                    _SourceByte[index + <span class="number">1</span>] = <span class="number">255</span>;</span><br><span class="line">                    _SourceByte[index + <span class="number">2</span>] = <span class="number">255</span>;</span><br><span class="line">                    _SourceByte[index + <span class="number">3</span>] = <span class="number">255</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//重置Y坐标</span></span><br><span class="line">            _PointY = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//Bitmap tmpBitmap = new Bitmap(_SourceWidth, _SourceHeight);</span></span><br><span class="line">            <span class="comment">//BitmapData tmBitmapData = tmpBitmap.LockBits(new System.Drawing.Rectangle(0, 0, _SourceWidth, _SourceHeight), ImageLockMode.ReadWrite, System.Drawing.Imaging.PixelFormat.Format32bppArgb);</span></span><br><span class="line">            <span class="comment">//Marshal.Copy(_SourceByte, 0, tmBitmapData.Scan0, _SourceByte.Length);   //复制出p_PartBitmap的相素信息   </span></span><br><span class="line">            <span class="comment"><span class="doctag">///</span>/byte[] source, int startIndex, IntPtr destination, int length</span></span><br><span class="line">            <span class="comment">//tmpBitmap.UnlockBits(_PartData);</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            <span class="comment">//Graphics tmpGraphics = Graphics.FromImage(tmpBitmap);</span></span><br><span class="line">            <span class="comment">//tmpGraphics.DrawImage(tmpBitmap, new System.Drawing.Rectangle(0, 0, _SourceWidth, _SourceHeight));</span></span><br><span class="line">            <span class="comment">//tmpGraphics.Dispose();</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">//tmpBitmap.Save("test.bmp");</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> pointList;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我改成匹配多个结果的时候用的方法是把匹配到结果图形右下角到坐标0,0的区域涂黑，然后重新匹配，直到没有结果为止。但是这个跳一跳不用匹配多个结果，他只要这个方法确定象棋位置就可以</p><h2 id="鼠标钩子"><a href="#鼠标钩子" class="headerlink" title="鼠标钩子"></a>鼠标钩子</h2><p>这部分其实比较简单，就是调用 user32.dll 外部方法，搞几个委托处理下回调函数，有一个需要注意点就是钩子的回调函数必须搞成静态变量，不然会被GC回收掉，导致回调报错，我自己整理的钩子类如下</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> 全局钩子</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Hook</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">const</span> <span class="keyword">int</span> WM_MOUSEMOVE = <span class="number">0x200</span>;<span class="comment">//鼠标移动</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">const</span> <span class="keyword">int</span> WM_LBUTTONDOWN = <span class="number">0x201</span>;<span class="comment">//左键按下</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">const</span> <span class="keyword">int</span> WM_RBUTTONDOWN = <span class="number">0x204</span>;<span class="comment">//右键按下</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">const</span> <span class="keyword">int</span> WM_MBUTTONDOWN = <span class="number">0x207</span>;<span class="comment">//滚轮按下</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">const</span> <span class="keyword">int</span> WM_LBUTTONUP = <span class="number">0x202</span>;<span class="comment">//左键松开</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">const</span> <span class="keyword">int</span> WM_RBUTTONUP = <span class="number">0x205</span>;<span class="comment">//右键松开</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">const</span> <span class="keyword">int</span> WM_MBUTTONUP = <span class="number">0x208</span>;<span class="comment">//滚轮松开</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">const</span> <span class="keyword">int</span> WM_LBUTTONDBLCLK = <span class="number">0x203</span>;<span class="comment">//左键双击</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">const</span> <span class="keyword">int</span> WM_RBUTTONDBLCLK = <span class="number">0x206</span>;<span class="comment">//右键双击</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">const</span> <span class="keyword">int</span> WM_MBUTTONDBLCLK = <span class="number">0x209</span>;<span class="comment">//滚轮双击</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">const</span> <span class="keyword">int</span> WH_KEYBOARD_LL = <span class="number">13</span>; <span class="comment">//键盘</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">const</span> <span class="keyword">int</span> WH_MOUSE_LL = <span class="number">14</span>; <span class="comment">// mouse hook constant</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">const</span> <span class="keyword">int</span> WM_KEYDOWN = <span class="number">0x0100</span>; <span class="comment">//按下一个键</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">const</span> <span class="keyword">int</span> WM_KEYUP = <span class="number">0x0101</span>; <span class="comment">//释放一个键</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">const</span> <span class="keyword">int</span> WM_CHAR = <span class="number">0x0102</span>; <span class="comment">//按下某键，并已发出WM_KEYDOWN，WM_KEYUP消息</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">const</span> <span class="keyword">int</span> WM_SYSKEYDOWN = <span class="number">0x0104</span>; <span class="comment">//当用户按住ALT键同时按下其它键时提交此消息给拥有焦点的窗口</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">const</span> <span class="keyword">int</span> WM_SYSKEYUP = <span class="number">0x0105</span>; <span class="comment">//当用户释放一个键同时ALT 键还按着时提交此消息给拥有焦点的窗口</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">const</span> <span class="keyword">int</span> WM_SYSCHAR = <span class="number">0x0106</span>; <span class="comment">//当WM_SYSKEYDOWN消息被TRANSLATEMESSAGE函数翻译后提交此消息给拥有焦点的窗口</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> 点</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    [<span class="meta">StructLayout(LayoutKind.Sequential)</span>]</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">POINT</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">int</span> x;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">int</span> y;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> 鼠标钩子结构体</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    [<span class="meta">StructLayout(LayoutKind.Sequential)</span>]</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">MouseHookStruct</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">public</span> POINT pt;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">int</span> hWnd;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">int</span> wHitTestCode;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">int</span> dwExtraInfo;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> 键盘钩子结构体</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    [<span class="meta">StructLayout(LayoutKind.Sequential)</span>]</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">KeyBoardHookStruct</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">int</span> vkCode;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">int</span> scanCode;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">int</span> flags;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">int</span> time;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">int</span> dwExtraInfo;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 装置钩子的函数</span></span><br><span class="line">    [<span class="meta">DllImport(<span class="meta-string">"user32.dll"</span>, CharSet = CharSet.Auto, CallingConvention = CallingConvention.StdCall)</span>]</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">extern</span> <span class="keyword">int</span> <span class="title">SetWindowsHookEx</span>(<span class="params"><span class="keyword">int</span> idHook, HookProc lpfn, IntPtr hInstance, <span class="keyword">int</span> threadId</span>)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 卸下钩子的函数</span></span><br><span class="line">    [<span class="meta">DllImport(<span class="meta-string">"user32.dll"</span>, CharSet = CharSet.Auto, CallingConvention = CallingConvention.StdCall)</span>]</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">extern</span> <span class="keyword">bool</span> <span class="title">UnhookWindowsHookEx</span>(<span class="params"><span class="keyword">int</span> idHook</span>)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 下一个钩挂的函数</span></span><br><span class="line">    [<span class="meta">DllImport(<span class="meta-string">"user32.dll"</span>, CharSet = CharSet.Auto, CallingConvention = CallingConvention.StdCall)</span>]</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">extern</span> <span class="keyword">int</span> <span class="title">CallNextHookEx</span>(<span class="params"><span class="keyword">int</span> idHook, <span class="keyword">int</span> nCode, Int32 wParam, IntPtr lParam</span>)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 全局的鼠标事件</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">event</span> MouseEventHandler OnMouseActivity;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 全局的键盘事件</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">event</span> System.Windows.Forms.KeyEventHandler OnKeyBoardActivity;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 钩子回调函数</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">delegate</span> <span class="keyword">int</span> <span class="title">HookProc</span>(<span class="params"><span class="keyword">int</span> nCode, Int32 wParam, IntPtr lParam</span>)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 声明鼠标钩子事件类型</span></span><br><span class="line">    <span class="comment">//private HookProc _mouseHookProcedure;</span></span><br><span class="line">    <span class="comment">//private HookProc _keyBoacrdHookProcedure;</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> _hMouseHook = <span class="number">0</span>; <span class="comment">// 鼠标钩子句柄 卸载钩子需要使用</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> _hKeyBoardHook = <span class="number">0</span>; <span class="comment">// 键盘钩子句柄 卸载钩子需要使用</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> 构造函数</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Hook</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> 析构函数</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    ~Hook()</span><br><span class="line">    &#123;</span><br><span class="line">        StopMouseHook();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> HookProc _mouseHookProcedure;</span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> 启动鼠标钩子</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">StartMouseHook</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="comment">// 安装鼠标钩子</span></span><br><span class="line">        <span class="keyword">if</span> (_hMouseHook == <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">// 生成一个HookProc的实例.</span></span><br><span class="line"></span><br><span class="line">            _mouseHookProcedure = MouseHookProc;</span><br><span class="line">            _hMouseHook = SetWindowsHookEx(WH_MOUSE_LL, _mouseHookProcedure, IntPtr.Zero, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//假设装置失败停止钩子</span></span><br><span class="line">            <span class="keyword">if</span> (_hMouseHook == <span class="number">0</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                StopMouseHook();</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> Exception(<span class="string">"SetWindowsHookEx failed."</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> 停止鼠标钩子</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">StopMouseHook</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">bool</span> retMouse = <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (_hMouseHook != <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            retMouse = UnhookWindowsHookEx(_hMouseHook);</span><br><span class="line">            _hMouseHook = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 假设卸下钩子失败</span></span><br><span class="line">        <span class="keyword">if</span> (!(retMouse))</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> Exception(<span class="string">"UnhookWindowsHookEx failed."</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> 鼠标钩子回调函数</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">MouseHookProc</span>(<span class="params"><span class="keyword">int</span> nCode, Int32 wParam, IntPtr lParam</span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="comment">// 假设正常执行而且用户要监听鼠标的消息</span></span><br><span class="line">        <span class="keyword">if</span> ((nCode &gt;= <span class="number">0</span>) &amp;&amp; (OnMouseActivity != <span class="literal">null</span>))</span><br><span class="line">        &#123;</span><br><span class="line">            MouseButtons button = MouseButtons.None;</span><br><span class="line">            <span class="keyword">int</span> clickCount = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">switch</span> (wParam)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">case</span> WM_LBUTTONDOWN:</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> WM_LBUTTONUP:</span><br><span class="line">                    button = MouseButtons.Left;</span><br><span class="line">                    clickCount = <span class="number">1</span>;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> WM_LBUTTONDBLCLK:</span><br><span class="line">                    button = MouseButtons.Left;</span><br><span class="line">                    clickCount = <span class="number">2</span>;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> WM_RBUTTONDOWN:</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> WM_RBUTTONUP:</span><br><span class="line">                    button = MouseButtons.Right;</span><br><span class="line">                    clickCount = <span class="number">1</span>;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> WM_RBUTTONDBLCLK:</span><br><span class="line">                    button = MouseButtons.Right;</span><br><span class="line">                    clickCount = <span class="number">2</span>;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 从回调函数中得到鼠标的信息</span></span><br><span class="line">            MouseHookStruct myMouseHookStruct = (MouseHookStruct)Marshal.PtrToStructure(lParam, <span class="keyword">typeof</span>(MouseHookStruct));</span><br><span class="line">            MouseEventArgs e = <span class="keyword">new</span> MouseEventArgs(button, clickCount, myMouseHookStruct.pt.x, myMouseHookStruct.pt.y, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 假设想要限制鼠标在屏幕中的移动区域能够在此处设置</span></span><br><span class="line">            <span class="comment">// 后期须要考虑实际的x、y的容差</span></span><br><span class="line">            <span class="comment">//if (!Screen.PrimaryScreen.Bounds.Contains(e.X, e.Y))</span></span><br><span class="line">            <span class="comment">//&#123;</span></span><br><span class="line">            <span class="comment">//    //return 1;</span></span><br><span class="line">            <span class="comment">//&#125;</span></span><br><span class="line"></span><br><span class="line">            OnMouseActivity(<span class="keyword">this</span>, e);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 启动下一次钩子</span></span><br><span class="line">        <span class="keyword">return</span> CallNextHookEx(_hMouseHook, nCode, wParam, lParam);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> HookProc _keyBoacrdHookProcedure;</span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> 启动键盘钩子</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">StartKeyBoardHook</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="comment">// 安装鼠标钩子</span></span><br><span class="line">        <span class="keyword">if</span> (_hKeyBoardHook == <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">// 生成一个HookProc的实例.</span></span><br><span class="line">            _keyBoacrdHookProcedure = KeyBoardHookProc;</span><br><span class="line"></span><br><span class="line">            _hKeyBoardHook = SetWindowsHookEx(WH_KEYBOARD_LL, _keyBoacrdHookProcedure, IntPtr.Zero, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//假设装置失败停止钩子</span></span><br><span class="line">            <span class="keyword">if</span> (_hKeyBoardHook == <span class="number">0</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                StopKeyBoardHook();</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> Exception(<span class="string">"SetWindowsHookEx failed."</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> 停止键盘钩子</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">StopKeyBoardHook</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">bool</span> retMouse = <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (_hKeyBoardHook != <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            retMouse = UnhookWindowsHookEx(_hKeyBoardHook);</span><br><span class="line">            _hKeyBoardHook = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 假设卸下钩子失败</span></span><br><span class="line">        <span class="keyword">if</span> (!(retMouse))</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> Exception(<span class="string">"UnhookWindowsHookEx failed."</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> 键盘钩子回调函数</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">KeyBoardHookProc</span>(<span class="params"><span class="keyword">int</span> nCode, Int32 wParam, IntPtr lParam</span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="comment">// 假设正常执行而且用户要监听鼠标的消息</span></span><br><span class="line">        <span class="keyword">if</span> ((nCode &gt;= <span class="number">0</span>) &amp;&amp; (OnKeyBoardActivity != <span class="literal">null</span>))</span><br><span class="line">        &#123;</span><br><span class="line">            KeyBoardHookStruct kbh = (KeyBoardHookStruct)Marshal.PtrToStructure(lParam, <span class="keyword">typeof</span>(KeyBoardHookStruct));</span><br><span class="line">            <span class="keyword">var</span> k = (Keys)Enum.Parse(<span class="keyword">typeof</span>(Keys), kbh.vkCode.ToString());</span><br><span class="line"></span><br><span class="line">            <span class="keyword">switch</span> (k)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">case</span> Keys.F10:</span><br><span class="line">                    <span class="keyword">if</span> (wParam == WM_KEYDOWN)</span><br><span class="line">                    &#123;</span><br><span class="line">                        Keys keyData = (Keys)kbh.vkCode;</span><br><span class="line">                        System.Windows.Forms.KeyEventArgs e = <span class="keyword">new</span> System.Windows.Forms.KeyEventArgs(keyData);</span><br><span class="line">                        OnKeyBoardActivity(<span class="keyword">this</span>, e);</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">else</span></span><br><span class="line">                    &#123;</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                <span class="keyword">default</span>:</span><br><span class="line">                    <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 启动下一次钩子</span></span><br><span class="line">        <span class="keyword">return</span> CallNextHookEx(_hKeyBoardHook, nCode, wParam, lParam);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="界面以及主逻辑"><a href="#界面以及主逻辑" class="headerlink" title="界面以及主逻辑"></a>界面以及主逻辑</h2><p>因为每次跳动都要确定模拟器的区域，所以第一步我先获取句柄，然后根据窗体句柄获取模拟器界面边界，屏幕截图在截取出模拟器的界面，得到匹配用的原图</p><p>素材图片，就是旗子身体的一部分，因为根据模拟器窗体大小会变化，所以采用读取本件的方法，这意味着你要事先截取好素材图片，需要注意的是之前自己写的图片匹配方法比较死板，所以素材图片不能把背景搞进去，不然肯定匹配不出来</p><p>然后就是 user32一些外部方法，用来移动鼠标，模拟鼠标操作</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">region</span> 跳一跳相关</span></span><br><span class="line"></span><br><span class="line">RECT _jumpRect = <span class="keyword">new</span> RECT();<span class="comment">//模拟器坐标</span></span><br><span class="line"><span class="keyword">string</span> _pieceImgPath = String.Empty;<span class="comment">//棋子图片路径</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> 鼠标取句柄按钮点击</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name="sender"&gt;</span><span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name="e"&gt;</span><span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">button3_Click_1</span>(<span class="params"><span class="keyword">object</span> sender, RoutedEventArgs e</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//开启钩子监听鼠标点击事件</span></span><br><span class="line">    hook.OnMouseActivity += Jump1HookActivity;</span><br><span class="line">    hook.StartMouseHook();</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> 鼠标钩子左键回调</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name="sender"&gt;</span><span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name="mouseEventArgs"&gt;</span><span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">Jump1HookActivity</span>(<span class="params"><span class="keyword">object</span> sender, System.Windows.Forms.MouseEventArgs mouseEventArgs</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (mouseEventArgs.Button == MouseButtons.Left &amp;&amp; mouseEventArgs.Clicks == <span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//当前鼠标坐标</span></span><br><span class="line">        <span class="keyword">var</span> point = <span class="keyword">new</span> POINT();</span><br><span class="line">        GetCursorPos(<span class="keyword">out</span> point);</span><br><span class="line">        <span class="comment">//句柄</span></span><br><span class="line">        formHandle = WindowFromPoint(point);</span><br><span class="line">        <span class="comment">//标题</span></span><br><span class="line">        <span class="keyword">var</span> title = <span class="keyword">new</span> StringBuilder(<span class="number">256</span>);</span><br><span class="line">        GetWindowText(formHandle, title, title.Capacity);</span><br><span class="line">        <span class="comment">//类名</span></span><br><span class="line">        <span class="keyword">var</span> className = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">        GetClassName(formHandle, className, className.Capacity);</span><br><span class="line">        <span class="comment">//Size</span></span><br><span class="line">        _jumpRect = <span class="keyword">new</span> RECT();</span><br><span class="line">        GetWindowRect(formHandle, <span class="keyword">ref</span> _jumpRect);</span><br><span class="line">        AddLog(<span class="string">$"句柄采集成功！窗体坐标范围为 <span class="subst">&#123;_jumpRect.Left&#125;</span>,<span class="subst">&#123;_jumpRect.Top&#125;</span>-<span class="subst">&#123;_jumpRect.Right&#125;</span>,<span class="subst">&#123;_jumpRect.Bottom&#125;</span>"</span>);</span><br><span class="line">        AddLog(<span class="string">$"窗体大小 Width:<span class="subst">&#123;_jumpRect.Right - _jumpRect.Left&#125;</span>,Height:<span class="subst">&#123;_jumpRect.Bottom - _jumpRect.Top&#125;</span>"</span>);</span><br><span class="line">        hook.StopMouseHook();</span><br><span class="line">        hook.OnMouseActivity -= Jump1HookActivity;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">AddLog</span>(<span class="params"><span class="keyword">string</span> str</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!<span class="keyword">string</span>.IsNullOrWhiteSpace(textBox3.Text))</span><br><span class="line">    &#123;</span><br><span class="line">        textBox3.Text += Environment.NewLine;</span><br><span class="line">    &#125;</span><br><span class="line">    textBox3.Text += <span class="string">$"<span class="subst">&#123;DateTime.Now:yyyy-MM-dd HH:mm:ss&#125;</span>：<span class="subst">&#123;str&#125;</span>"</span>;</span><br><span class="line">    textBox3.ScrollToEnd();</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> 取象棋图片素材</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name="sender"&gt;</span><span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name="e"&gt;</span><span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">button4_Click</span>(<span class="params"><span class="keyword">object</span> sender, RoutedEventArgs e</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//初始化一个OpenFileDialog类</span></span><br><span class="line">    OpenFileDialog fileDialog = <span class="keyword">new</span> OpenFileDialog();</span><br><span class="line">    fileDialog.Multiselect = <span class="literal">false</span>;</span><br><span class="line">    fileDialog.Filter = <span class="string">"(*.bmp)|*.bmp"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//判断用户是否正确的选择了文件</span></span><br><span class="line">    <span class="keyword">if</span> (fileDialog.ShowDialog() == System.Windows.Forms.DialogResult.OK)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//获取用户选择文件的后缀名</span></span><br><span class="line">        <span class="keyword">string</span> extension = Path.GetExtension(fileDialog.FileName);</span><br><span class="line">        <span class="comment">//声明允许的后缀名</span></span><br><span class="line">        <span class="keyword">string</span>[] str = <span class="keyword">new</span> <span class="keyword">string</span>[] &#123; <span class="string">".bmp"</span>, <span class="string">".BMP"</span> &#125;;</span><br><span class="line">        <span class="keyword">if</span> (!((IList)str).Contains(extension))</span><br><span class="line">        &#123;</span><br><span class="line">            MessageBox.Show(<span class="string">"只能处理BMP格式图片"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            _pieceImgPath = fileDialog.FileName;</span><br><span class="line">            AddLog(<span class="string">$"棋子素材路径读取成功 <span class="subst">&#123;_pieceImgPath&#125;</span>"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> 开始</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name="sender"&gt;</span><span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name="e"&gt;</span><span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">button5_Click</span>(<span class="params"><span class="keyword">object</span> sender, RoutedEventArgs e</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//开启钩子监听鼠标右键</span></span><br><span class="line">    hook.OnMouseActivity += Jump2HookActivity;</span><br><span class="line">    hook.StartMouseHook();</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> 鼠标钩子右键回调</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name="sender"&gt;</span><span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name="mouseEventArgs"&gt;</span><span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">Jump2HookActivity</span>(<span class="params"><span class="keyword">object</span> sender, System.Windows.Forms.MouseEventArgs mouseEventArgs</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (mouseEventArgs.Button == MouseButtons.Right &amp;&amp; mouseEventArgs.Clicks == <span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        Bitmap image1 = <span class="keyword">new</span> Bitmap(_jumpRect.Right - _jumpRect.Left, _jumpRect.Bottom - _jumpRect.Top);<span class="comment">//截取屏幕</span></span><br><span class="line">        Graphics imgGraphics = Graphics.FromImage(image1);</span><br><span class="line">        imgGraphics.CopyFromScreen(<span class="keyword">new</span> System.Drawing.Point(_jumpRect.Left, _jumpRect.Top), <span class="keyword">new</span> System.Drawing.Point(<span class="number">0</span>, <span class="number">0</span>),</span><br><span class="line">            <span class="keyword">new</span> System.Drawing.Size(_jumpRect.Right - _jumpRect.Left, _jumpRect.Bottom - _jumpRect.Top));</span><br><span class="line">        <span class="comment">//image1.Save("test.bmp");</span></span><br><span class="line"></span><br><span class="line">        Bitmap image2 = (Bitmap)System.Drawing.Image.FromFile(_pieceImgPath);</span><br><span class="line">        _points = ToFindPic.GetAllPoints(image1, image2, <span class="number">10</span>);</span><br><span class="line">        <span class="keyword">if</span> (_points == <span class="literal">null</span> || _points.Count == <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            AddLog(<span class="string">"没有匹配到棋子坐标"</span>);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">var</span> pointPeople = <span class="keyword">new</span> System.Windows.Point(_jumpRect.Left + _points[<span class="number">0</span>].X, _jumpRect.Top + _points[<span class="number">0</span>].Y);</span><br><span class="line">        <span class="comment">//偏移坐标</span></span><br><span class="line">        pointPeople.X += image2.Width / <span class="number">2</span>;</span><br><span class="line">        pointPeople.Y += image2.Height / <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//SetCursorPos(Convert.ToInt32(pointPeople.X), Convert.ToInt32(pointPeople.Y));//test</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">var</span> pointTarget = <span class="keyword">new</span> Point(mouseEventArgs.X, mouseEventArgs.Y);</span><br><span class="line">        <span class="keyword">var</span> distance = Math.Sqrt(Math.Pow(pointTarget.X - pointPeople.X, <span class="number">2</span>) + Math.Pow(pointTarget.Y - pointPeople.Y, <span class="number">2</span>));</span><br><span class="line">        <span class="keyword">var</span> coefficient = <span class="number">3.6</span>;</span><br><span class="line">        <span class="keyword">if</span> (pointTarget.X &lt; pointPeople.X)</span><br><span class="line">        &#123;</span><br><span class="line">            coefficient = Convert.ToDouble(<span class="keyword">this</span>.textBox_jumpX.Text);<span class="comment">//系数</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            coefficient = Convert.ToDouble(<span class="keyword">this</span>.textBox_jumpY.Text);<span class="comment">//系数</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">var</span> pressTime = <span class="keyword">new</span> TimeSpan(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, Convert.ToInt32(coefficient * distance));<span class="comment">//毫秒</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="keyword">var</span> random = <span class="keyword">new</span> Random();</span><br><span class="line">        SetCursorPos(_jumpRect.Right - random.Next(<span class="number">150</span>, <span class="number">250</span>), _jumpRect.Top + random.Next(<span class="number">150</span>, <span class="number">250</span>));<span class="comment">//移动鼠标位置</span></span><br><span class="line">        mouse_event(MouseEventFlag.LeftDown, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, UIntPtr.Zero);</span><br><span class="line">        <span class="keyword">var</span> now = DateTime.Now;</span><br><span class="line">        Thread.Sleep(pressTime);</span><br><span class="line">        <span class="keyword">var</span> ts = DateTime.Now - now;</span><br><span class="line">        AddLog(<span class="string">$"预计耗时<span class="subst">&#123;pressTime.Milliseconds&#125;</span>,实际耗时<span class="subst">&#123;ts.TotalMilliseconds&#125;</span>"</span>);</span><br><span class="line">        mouse_event(MouseEventFlag.LeftUp, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, UIntPtr.Zero);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> stop</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name="sender"&gt;</span><span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name="e"&gt;</span><span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">button6_Click</span>(<span class="params"><span class="keyword">object</span> sender, RoutedEventArgs e</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    hook.StopMouseHook();</span><br><span class="line">    hook = <span class="keyword">new</span> Hook();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endregion</span></span></span><br></pre></td></tr></table></figure><p>user32部分</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">region</span> user32</span></span><br><span class="line"><span class="comment">//句柄窗体相关</span></span><br><span class="line">[<span class="meta">DllImport(<span class="meta-string">"user32.dll"</span>)</span>]</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">extern</span> <span class="keyword">int</span> <span class="title">GetWindowText</span>(<span class="params">IntPtr hWnd, StringBuilder lpString, <span class="keyword">int</span> nMaxCount</span>)</span>;</span><br><span class="line">[<span class="meta">DllImport(<span class="meta-string">"user32.dll"</span>)</span>]</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">extern</span> <span class="keyword">int</span> <span class="title">GetClassName</span>(<span class="params">IntPtr hWnd, StringBuilder lpString, <span class="keyword">int</span> nMaxCount</span>)</span>;</span><br><span class="line">[<span class="meta">DllImport(<span class="meta-string">"user32.dll"</span>)</span>]</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">extern</span> IntPtr <span class="title">WindowFromPoint</span>(<span class="params">POINT point</span>)</span>;</span><br><span class="line">[<span class="meta">DllImport(<span class="meta-string">"user32.dll"</span>, CharSet = CharSet.Auto)</span>]</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">extern</span> <span class="keyword">bool</span> <span class="title">GetCursorPos</span>(<span class="params"><span class="keyword">out</span> POINT point</span>)</span>;</span><br><span class="line">[<span class="meta">DllImport(<span class="meta-string">"user32.dll"</span>)</span>]</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">extern</span> <span class="keyword">int</span> <span class="title">SetCursorPos</span>(<span class="params"><span class="keyword">int</span> x, <span class="keyword">int</span> y</span>)</span>;</span><br><span class="line">[<span class="meta">DllImport(<span class="meta-string">"user32.dll"</span>, EntryPoint = <span class="meta-string">"GetParent"</span>, SetLastError = true)</span>]</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">extern</span> IntPtr <span class="title">GetParent</span>(<span class="params">IntPtr hWnd</span>)</span>;</span><br><span class="line">[<span class="meta">DllImport(<span class="meta-string">"user32.dll"</span>, EntryPoint = <span class="meta-string">"GetWindowThreadProcessId"</span>)</span>]</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">extern</span> <span class="keyword">uint</span> <span class="title">GetWindowThreadProcessId</span>(<span class="params">IntPtr hWnd, <span class="keyword">ref</span> <span class="keyword">uint</span> lpdwProcessId</span>)</span>;</span><br><span class="line"><span class="comment">//设置鼠标按键和动作</span></span><br><span class="line">[<span class="meta">Flags</span>]</span><br><span class="line"><span class="keyword">enum</span> MouseEventFlag : <span class="keyword">uint</span> <span class="comment">//设置鼠标动作的键值</span></span><br><span class="line">&#123;</span><br><span class="line">    Move = <span class="number">0x0001</span>,               <span class="comment">//发生移动</span></span><br><span class="line">    LeftDown = <span class="number">0x0002</span>,           <span class="comment">//鼠标按下左键</span></span><br><span class="line">    LeftUp = <span class="number">0x0004</span>,             <span class="comment">//鼠标松开左键</span></span><br><span class="line">    RightDown = <span class="number">0x0008</span>,          <span class="comment">//鼠标按下右键</span></span><br><span class="line">    RightUp = <span class="number">0x0010</span>,            <span class="comment">//鼠标松开右键</span></span><br><span class="line">    MiddleDown = <span class="number">0x0020</span>,         <span class="comment">//鼠标按下中键</span></span><br><span class="line">    MiddleUp = <span class="number">0x0040</span>,           <span class="comment">//鼠标松开中键</span></span><br><span class="line">    XDown = <span class="number">0x0080</span>,</span><br><span class="line">    XUp = <span class="number">0x0100</span>,</span><br><span class="line">    Wheel = <span class="number">0x0800</span>,              <span class="comment">//鼠标轮被移动</span></span><br><span class="line">    VirtualDesk = <span class="number">0x4000</span>,        <span class="comment">//虚拟桌面</span></span><br><span class="line">    Absolute = <span class="number">0x8000</span></span><br><span class="line">&#125;</span><br><span class="line">[<span class="meta">DllImport(<span class="meta-string">"user32.dll"</span>)</span>]</span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">extern</span> <span class="keyword">void</span> <span class="title">mouse_event</span>(<span class="params">MouseEventFlag flags, <span class="keyword">int</span> dx, <span class="keyword">int</span> dy, <span class="keyword">uint</span> data, UIntPtr extraInfo</span>)</span>; <span class="comment">//UIntPtr指针多句柄类型</span></span><br><span class="line">[<span class="meta">StructLayout(LayoutKind.Sequential)</span>]</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">struct</span> POINT</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span> X;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span> Y;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">POINT</span>(<span class="params"><span class="keyword">int</span> x, <span class="keyword">int</span> y</span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.X = x;</span><br><span class="line">        <span class="keyword">this</span>.Y = y;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">string</span> <span class="title">ToString</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> (<span class="string">"X:"</span> + X + <span class="string">", Y:"</span> + Y);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">[<span class="meta">DllImport(<span class="meta-string">"user32.dll"</span>)</span>]</span><br><span class="line">[<span class="meta">return: MarshalAs(UnmanagedType.Bool)</span>]</span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">extern</span> <span class="keyword">bool</span> <span class="title">GetWindowRect</span>(<span class="params">IntPtr hWnd, <span class="keyword">ref</span> RECT lpRect</span>)</span>;</span><br><span class="line">[<span class="meta">StructLayout(LayoutKind.Sequential)</span>]</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">struct</span> RECT</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span> Left;                             <span class="comment">//最左坐标</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span> Top;                             <span class="comment">//最上坐标</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span> Right;                           <span class="comment">//最右坐标</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span> Bottom;                        <span class="comment">//最下坐标</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">[<span class="meta">DllImport(<span class="meta-string">"User32.dll"</span>, EntryPoint = <span class="meta-string">"FindWindow"</span>)</span>]</span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">extern</span> IntPtr <span class="title">FindWindow</span>(<span class="params"><span class="keyword">string</span> lpClassName, <span class="keyword">string</span> lpWindowName</span>)</span>;</span><br><span class="line">[<span class="meta">DllImport(<span class="meta-string">"User32.dll"</span>, EntryPoint = <span class="meta-string">"FindWindowEx"</span>)</span>]</span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">extern</span> IntPtr <span class="title">FindWindowEx</span>(<span class="params">IntPtr hwndParent, IntPtr hwndChildAfter, <span class="keyword">string</span> lpClassName, <span class="keyword">string</span> lpWindowName</span>)</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//鼠标钩子相关</span></span><br><span class="line">[<span class="meta">StructLayout(LayoutKind.Sequential)</span>]</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">MouseHookStruct</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> POINT pt;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span> hwnd;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span> wHitTestCode;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span> dwExtraInfo;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">delegate</span> <span class="keyword">int</span> <span class="title">HookProc</span>(<span class="params"><span class="keyword">int</span> nCode, IntPtr wParam, IntPtr lParam</span>)</span>;</span><br><span class="line"><span class="comment">//安装钩子</span></span><br><span class="line">[<span class="meta">DllImport(<span class="meta-string">"user32.dll"</span>, CharSet = CharSet.Auto, CallingConvention = CallingConvention.StdCall)</span>]</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">extern</span> <span class="keyword">int</span> <span class="title">SetWindowsHookEx</span>(<span class="params"><span class="keyword">int</span> idHook, HookProc lpfn, IntPtr hInstance, <span class="keyword">int</span> threadId</span>)</span>;</span><br><span class="line"><span class="comment">//卸载钩子</span></span><br><span class="line">[<span class="meta">DllImport(<span class="meta-string">"user32.dll"</span>, CharSet = CharSet.Auto, CallingConvention = CallingConvention.StdCall)</span>]</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">extern</span> <span class="keyword">bool</span> <span class="title">UnhookWindowsHookEx</span>(<span class="params"><span class="keyword">int</span> idHook</span>)</span>;</span><br><span class="line"><span class="comment">//调用下一个钩子</span></span><br><span class="line">[<span class="meta">DllImport(<span class="meta-string">"user32.dll"</span>, CharSet = CharSet.Auto, CallingConvention = CallingConvention.StdCall)</span>]</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">extern</span> <span class="keyword">int</span> <span class="title">CallNextHookEx</span>(<span class="params"><span class="keyword">int</span> idHook, <span class="keyword">int</span> nCode, IntPtr wParam, IntPtr lParam</span>)</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endregion</span></span></span><br></pre></td></tr></table></figure><h1 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h1><ol><li>效果图每次右键一次会记两次日志是因为我之前点了两次go按钮，导致每次右键回调了2次 <img src="https://cfmyhome-1256032936.cos.ap-shanghai.myqcloud.com/QQ%E5%9B%BE%E7%89%8720180223153808.gif" alt="这可真蠢"></li><li>跳一跳后台估计会根据连续perfect次数判断是否用作弊，如果它判断你作弊就不记录成绩了，而且我怀疑只要你超过一定分数他都直接判你作弊，然后骗一波个人照去申诉，因为作不作弊没那么容易区分</li><li>图像匹配和识别简单的很容易实现，但是想实现复杂一些的，比如扭曲倾斜的图片，没有研究过理论光靠直觉是想不出解决方案的，还是很有深度</li></ol>]]></content>
    
    <summary type="html">
    
      &lt;blockquote class=&quot;blockquote-center&quot;&gt;&lt;p&gt;微信跳一跳小程序原理比较简单，抛开声音要素，跳的距离与拇指按压时间成正比例，假设每次跳动距离都等于拇指按压时间*常数系数，这个游戏就变成了根据跳动距离求解按压时间，于是乎我在PC端用安卓模拟器和C#实现了一个跳一跳辅助程序&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="鼠标钩子" scheme="http://yoursite.com/tags/%E9%BC%A0%E6%A0%87%E9%92%A9%E5%AD%90/"/>
    
      <category term="图像识别" scheme="http://yoursite.com/tags/%E5%9B%BE%E5%83%8F%E8%AF%86%E5%88%AB/"/>
    
      <category term="微信跳一跳" scheme="http://yoursite.com/tags/%E5%BE%AE%E4%BF%A1%E8%B7%B3%E4%B8%80%E8%B7%B3/"/>
    
  </entry>
  
  <entry>
    <title>关于努力</title>
    <link href="http://yoursite.com/2018/01/27/%E5%85%B3%E4%BA%8E%E5%8A%AA%E5%8A%9B/"/>
    <id>http://yoursite.com/2018/01/27/关于努力/</id>
    <published>2018-01-27T11:30:33.000Z</published>
    <updated>2018-04-11T08:40:29.776Z</updated>
    
    <content type="html"><![CDATA[<p>多久了？很久–久到我以为以后不会在更新任何一篇博文，域名再也不用续费了。2016年下半年到2018年一月底，我感觉自己人生处于持续的低潮，更准确的说是还在下跌的过程，简直就像我好久不变的QQ个性签名一样—<strong>活在梦里</strong><br><a id="more"></a></p><p>刚毕业的时候我有一个观点，即人生不该有什么事情值得去后悔，错了吸取教训就是了，但这段时间我发现自己已经开始有后悔的事情了，因为我发现了这个观点的矛盾，那就是人生只有一次，你吸取的教训可能只能传给子嗣，或者梦里带到下辈子了，想到这里就觉得有些可悲。有个成语叫做亡羊补牢为时不晚，不晚，但永远挽救不了已经失去的羊，真的不晚吗？</p><p>无数古人告诉我们，做人要及时行乐，我觉得现在的社会，钱是衡量一切元素的指标，人们赚了钱就高兴、乐，没赚到钱就失望、哭，在这种环境中根本做不到及时行乐，除非你脱离尘世，隐居山林，做着像刻经文一样虔诚的工作，如果你生活在一个大城市里，身边一堆人为钱奔波，你却怡然自得轻松享受，我觉着就算乐了，也是苦中作乐</p><p>所以我要放弃自己想做的事情，优先做自己该做的事情，周星驰电影有一句话，做人如果没有梦想，那跟咸鱼有什么区别。以前总用来搞笑的这句话，我觉得用来勉励自己太合适了，但是现在梦想二字被世俗炒作的过于沉重，拿梦想讽刺的人，也只是深陷泥潭掏不出半点勇气了</p><p>5oiR546w5Zyo5bey57uP5pyJ5Liq6YGl6L+c55qE55uu5qCH77yM5L2G5piv5LiN6IO96K+077yM6K+05LqG5bCx5a655piT6KKr5pS+5byD77yM6KaB6JeP5Zyo5b+D6YeM44CC6ICM5LiU77yB77yB5oiR56a76L+Z5Liq55uu5qCH6Z2e5bi46L+c77yB77yB5oiR5LiN55+l6YGT5oiR6Ieq5bex6KaB5aSa5Yqq5Yqb5omN6IO95a6e546w5a6D77yM5L2G5piv5oiR5Lya5pyd6L+Z5Liq5pa55ZCR5LiA55u05Yqq5Yqb77yM55u05Yiw5oiR5LiN5b6X5LiN5pS+5byD</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;多久了？很久–久到我以为以后不会在更新任何一篇博文，域名再也不用续费了。2016年下半年到2018年一月底，我感觉自己人生处于持续的低潮，更准确的说是还在下跌的过程，简直就像我好久不变的QQ个性签名一样—&lt;strong&gt;活在梦里&lt;/strong&gt;&lt;br&gt;
    
    </summary>
    
    
      <category term="吐槽" scheme="http://yoursite.com/tags/%E5%90%90%E6%A7%BD/"/>
    
  </entry>
  
  <entry>
    <title>浅谈匿名函数及Lambda</title>
    <link href="http://yoursite.com/2016/07/11/%E6%B5%85%E8%B0%88%E5%8C%BF%E5%90%8D%E5%87%BD%E6%95%B0%E5%8F%8ALambda/"/>
    <id>http://yoursite.com/2016/07/11/浅谈匿名函数及Lambda/</id>
    <published>2016-07-11T14:22:03.000Z</published>
    <updated>2018-11-19T14:50:34.912Z</updated>
    
    <content type="html"><![CDATA[<h2 id="匿名对象"><a href="#匿名对象" class="headerlink" title="匿名对象"></a>匿名对象</h2><h3 id="初始化方法"><a href="#初始化方法" class="headerlink" title="初始化方法"></a>初始化方法</h3><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = <span class="keyword">new</span> &#123; Name = <span class="string">"cfmy"</span>,Sex = <span class="string">"M"</span>&#125; ;<span class="comment">//单个匿名对象  </span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> objs = <span class="keyword">new</span>[]</span><br><span class="line">   &#123;</span><br><span class="line">       <span class="keyword">new</span> &#123; Name = <span class="string">"cfmy1"</span>, Sex = <span class="string">"M"</span> &#125;,</span><br><span class="line">       <span class="keyword">new</span> &#123; Name = <span class="string">"cfmy2"</span>, Sex = <span class="string">"M"</span> &#125;,</span><br><span class="line">       <span class="keyword">new</span> &#123; Name = <span class="string">"cfmy3"</span>, Sex = <span class="string">"M"</span> &#125;,</span><br><span class="line">       <span class="keyword">new</span> &#123; Name = <span class="string">"cfmy4"</span>, Sex = <span class="string">"M"</span> &#125;,</span><br><span class="line">       <span class="keyword">new</span> &#123; Name = <span class="string">"cfmy5"</span>, Sex = <span class="string">"M"</span> &#125;</span><br><span class="line">   &#125;;<span class="comment">//匿名对象数组；注意 属性顺序，数量，类型都必须一致，否则提示找不到隐式数组的最佳类型</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> objCobj = <span class="keyword">new</span> &#123; Name = <span class="string">"cfmy"</span>, self = <span class="keyword">new</span> &#123; Name = <span class="string">"cfmy"</span> &#125; &#125;; <span class="comment">//嵌套匿名对象</span></span><br></pre></td></tr></table></figure><p>初始化一个匿名对象之后，编译器会生成一个运行时类型(System.RunTimeType)，它是受保护的，它会根据初始化时的属性顺序，数量，类型构造出一个看不到的类型，它的所有属性都是只读的，只能在实例化时赋值<br><a id="more"></a></p><h3 id="特性"><a href="#特性" class="headerlink" title="特性"></a>特性</h3><ol><li>匿名对象只有属性，没有方法</li><li>同一个程序集中，如果匿名对象的属性名称、顺序、数量完全相同，那么他们的类型(Type)也是相同的<br><img src="https://cfmyhome-1256032936.cos.ap-shanghai.myqcloud.com/6-1.png" alt=""></li></ol><h3 id="适用场景"><a href="#适用场景" class="headerlink" title="适用场景"></a>适用场景</h3><ol><li>当你想创建一个只用一次的对象，只想用的属性，而不用其方法</li><li>上一点的具体化：你的数据源A、B、C三个字段，如果现在你在和另一方进行数据对接，他们需要要A、D两个字段，D是由B和C进行拼接或者某种逻辑处理而成，你现在需要快速创建出新的类型，但是这个类型在你们这个系统是无意义的，不想为其创建Class，那么匿名对象是你的不二选择<br><img src="https://cfmyhome-1256032936.cos.ap-shanghai.myqcloud.com/6-2.png" alt=""></li></ol><h2 id="匿名函数和Lambda表达式"><a href="#匿名函数和Lambda表达式" class="headerlink" title="匿名函数和Lambda表达式"></a>匿名函数和Lambda表达式</h2><p>了解匿名函数和Lambda表达式前首先需要按顺序了解如下概念</p><p>方法=》委托=》匿名委托=》匿名函数=》Lambda表达式</p><h3 id="委托"><a href="#委托" class="headerlink" title="委托"></a>委托</h3><p>根据匿名对象例子简单改进成利用委托ConvertList，具体代码如下</p><pre><code class="csharp"><span class="keyword">class</span> <span class="title">Person</span>{    <span class="keyword">public</span> <span class="keyword">int</span> Age { <span class="keyword">get</span>; <span class="keyword">set</span>; }    <span class="keyword">public</span> <span class="keyword">string</span> Name { <span class="keyword">get</span>; <span class="keyword">set</span>; }}<span class="keyword">class</span> <span class="title">PersonConverted</span>{    <span class="keyword">public</span> <span class="keyword">string</span> Name { <span class="keyword">get</span>; <span class="keyword">set</span>; }    <span class="keyword">public</span> <span class="keyword">bool</span> IsAdult { <span class="keyword">get</span>; <span class="keyword">set</span>; }}<span class="keyword">class</span> <span class="title">Test</span>{    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">DoSomething</span>(<span class="params"></span>)</span><span class="function">    </span>{        <span class="keyword">var</span> person = <span class="keyword">new</span> Person { Name = <span class="string">"cfmy"</span>, Age = <span class="number">10</span> };        <span class="keyword">var</span> list = <span class="keyword">new</span> List&lt;Person&gt;() { person };        <span class="keyword">var</span> convertedList1 = list.ConvertAll(Converter);<span class="comment">//直接传递方法</span>        Converter&lt;Person, PersonConverted&gt; converter = Converter;<span class="comment">//Converter是System自带委托类型</span>        <span class="keyword">var</span> convertedList2 = list.ConvertAll(converter);<span class="comment">//传递委托实例</span>    }    <span class="function">PersonConverted <span class="title">Converter</span>(<span class="params">Person person</span>)</span><span class="function">    </span>{        <span class="keyword">return</span> <span class="keyword">new</span> PersonConverted { Name = person.Name, IsAdult = person.Age &gt; <span class="number">18</span> };    }}</code></pre><p>其中ConvertAll反编译代码如下</p><pre><code class="csharp"><span class="keyword">public</span> List&lt;TOutput&gt; ConvertAll&lt;TOutput&gt;(Converter&lt;T,TOutput&gt; converter) {    <span class="keyword">if</span>( converter == <span class="literal">null</span>) {        ThrowHelper.ThrowArgumentNullException(ExceptionArgument.converter);    }    <span class="comment">// @</span>    Contract.EndContractBlock();    List&lt;TOutput&gt; list = <span class="keyword">new</span> List&lt;TOutput&gt;(_size);    <span class="keyword">for</span>( <span class="keyword">int</span> i = <span class="number">0</span>; i&lt; _size; i++) {        list._items[i] = converter(_items[i]);    }    list._size = _size;    <span class="keyword">return</span> list;}</code></pre><h3 id="匿名委托"><a href="#匿名委托" class="headerlink" title="匿名委托"></a>匿名委托</h3><p>可以看出ConvertAll接收一个委托类型Converter<t,toutput>。这意味着你可以传递该委托类型的函数或函数组，如果在传递委托函数的基础上简化一步代码，可以使用匿名委托，代码如下：</t,toutput></p><pre><code class="csharp"><span class="keyword">var</span> convertedList3 = list.ConvertAll(<span class="keyword">new</span> Converter&lt;Person, PersonConverted&gt;(Converter));<span class="comment">//匿名委托 + 显式函数</span></code></pre><p>如果用了匿名委托，就只能接收一个函数作为参数，这点需要注意，如果你想使用函数组，好像只能自己实例化一个委托，然后添加多个函数进去(笔者自己还无法确定这点)</p><h3 id="匿名函数"><a href="#匿名函数" class="headerlink" title="匿名函数"></a>匿名函数</h3><p>上个例子是匿名委托 + 显式函数，意味着我们还是要实现一个函数，使用匿名函数的话代码可以进一步精简代码如下：</p><pre><code class="csharp"><span class="keyword">var</span> convertedList4 = list.ConvertAll(<span class="keyword">new</span> Converter&lt;Person, PersonConverted&gt;(<span class="keyword">delegate</span> (Person p) { <span class="keyword">return</span> <span class="keyword">new</span> PersonConverted { Name = p.Name, IsAdult = p.Age &gt; <span class="number">18</span> }; }));<span class="comment">//匿名委托 + 匿名函数</span></code></pre><h4 id="匿名函数模型"><a href="#匿名函数模型" class="headerlink" title="匿名函数模型"></a>匿名函数模型</h4><p><em>匿名函数</em>大致模型如下</p><pre><code>delegate ([入参类型] [入参形参])//可以没有入参{    //方法体    return [返回值];//可以没有返回}</code></pre><p>了解模型后还是可以比较容易理解，但是我们了解到，传递委托的地方往往可以直接传递满足委托类型的函数，匿名也是同理，所以在需要传递委托的地方直接传递匿名函数的代码如下：</p><pre><code class="csharp"><span class="keyword">var</span> convertedList5 = list.ConvertAll(<span class="keyword">delegate</span> (Person p) { <span class="keyword">return</span> <span class="keyword">new</span> PersonConverted { Name = p.Name, IsAdult = p.Age &gt; <span class="number">18</span> }; });<span class="comment">//匿名函数</span></code></pre><p>但是在上个例子中还是用到了PersonConverted对象，如果再利用之前的匿名对象进行优化，可以得到如下代码：</p><pre><code class="csharp"><span class="keyword">var</span> convertedList6 = list.ConvertAll(<span class="keyword">delegate</span> (Person p) { <span class="keyword">return</span> <span class="keyword">new</span>  { Name = p.Name, IsAdult = p.Age &gt; <span class="number">18</span> }; });<span class="comment">//匿名函数 + 匿名对象</span></code></pre><h3 id="Lambda表达式"><a href="#Lambda表达式" class="headerlink" title="Lambda表达式"></a>Lambda表达式</h3><p>如果仅仅利用匿名的话，这已经是代码精进的极限了，这里我们既不需要建立委托类型，也不要建立返回类型Class，<strong>但是</strong>，Lambda表达式竟然还可以精简一步，先看下最终代码如下：</p><pre><code class="csharp"><span class="keyword">var</span> convertedList7 = list.ConvertAll(p =&gt; <span class="keyword">new</span> {Name = p.Name, IsAdult = p.Age &gt; <span class="number">18</span>});<span class="comment">//Lambda表达式</span></code></pre><p>Lambda表达式实质是匿名函数的一个语法糖，它的完整模型如下</p><pre><code>([入参a],[入参b])=&gt; {    //方法体    return [返回值];//可以没有返回值(比较少见)}</code></pre><p>其中没有入参的时候不能省略圆括号，只有一个入参的情况可以省略左侧圆括号；如果没有方法体的有返回值的时候右侧可以简化为<em>表达式</em>或<em>具体值</em>，具体如下</p><pre><code>(x)=&gt; x*x; x =&gt; x*x;() =&gt; 1;</code></pre><h3 id="整个例子流程"><a href="#整个例子流程" class="headerlink" title="整个例子流程"></a>整个例子流程</h3><p>代码如下：</p><pre><code class="csharp"><span class="keyword">class</span> <span class="title">Person</span>{    <span class="keyword">public</span> <span class="keyword">int</span> Age { <span class="keyword">get</span>; <span class="keyword">set</span>; }    <span class="keyword">public</span> <span class="keyword">string</span> Name { <span class="keyword">get</span>; <span class="keyword">set</span>; }}<span class="keyword">class</span> <span class="title">PersonConverted</span>{    <span class="keyword">public</span> <span class="keyword">string</span> Name { <span class="keyword">get</span>; <span class="keyword">set</span>; }    <span class="keyword">public</span> <span class="keyword">bool</span> IsAdult { <span class="keyword">get</span>; <span class="keyword">set</span>; }}<span class="keyword">class</span> <span class="title">Test</span>{    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">DoSomething</span>(<span class="params"></span>)</span><span class="function">    </span>{        <span class="keyword">var</span> person = <span class="keyword">new</span> Person { Name = <span class="string">"cfmy"</span>, Age = <span class="number">10</span> };        <span class="keyword">var</span> list = <span class="keyword">new</span> List&lt;Person&gt;() { person };        <span class="keyword">var</span> convertedList1 = list.ConvertAll(Converter); <span class="comment">//直接传递函数</span>        Converter&lt;Person, PersonConverted&gt; converter = Converter; <span class="comment">//Converter是System自带委托类型</span>        <span class="keyword">var</span> convertedList2 = list.ConvertAll(converter); <span class="comment">//传递委托实例</span>        <span class="keyword">var</span> convertedList3 = list.ConvertAll(<span class="keyword">new</span> Converter&lt;Person, PersonConverted&gt;(Converter)); <span class="comment">//匿名委托 + 显式函数</span>        <span class="keyword">var</span> convertedList4 =            list.ConvertAll(                <span class="keyword">new</span> Converter&lt;Person, PersonConverted&gt;(                    <span class="keyword">delegate</span> (Person p) { <span class="keyword">return</span> <span class="keyword">new</span> PersonConverted { Name = p.Name, IsAdult = p.Age &gt; <span class="number">18</span> }; }));        <span class="comment">//匿名委托 + 匿名函数</span>        <span class="keyword">var</span> convertedList5 =            list.ConvertAll(                <span class="keyword">delegate</span> (Person p) { <span class="keyword">return</span> <span class="keyword">new</span> PersonConverted { Name = p.Name, IsAdult = p.Age &gt; <span class="number">18</span> }; });        <span class="comment">//匿名函数</span>        <span class="keyword">var</span> convertedList6 =            list.ConvertAll(<span class="keyword">delegate</span> (Person p) { <span class="keyword">return</span> <span class="keyword">new</span> { Name = p.Name, IsAdult = p.Age &gt; <span class="number">18</span> }; });        <span class="comment">//匿名函数 + 匿名对象</span>        <span class="keyword">var</span> convertedList7 = list.ConvertAll(p =&gt; <span class="keyword">new</span> { Name = p.Name, IsAdult = p.Age &gt; <span class="number">18</span> }); <span class="comment">//Lambda表达式</span>    }    <span class="function">PersonConverted <span class="title">Converter</span>(<span class="params">Person person</span>)</span><span class="function">    </span>{        <span class="keyword">return</span> <span class="keyword">new</span> PersonConverted { Name = person.Name, IsAdult = person.Age &gt; <span class="number">18</span> };    }}</code></pre><h3 id="适用场景-1"><a href="#适用场景-1" class="headerlink" title="适用场景"></a>适用场景</h3><ol><li>匿名方法 =&gt; 所有需要传递委托的地方</li><li>Lambda表达式=&gt;从某个集合中过滤符合特定条件的集合<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2>Lambda表达式虽然大家可能都听说过，但是其实就是一个匿名方法的语法糖，如果你理解匿名方法的话，稍微看一下几种简化形式就可以完全掌握；相反，如果你连委托都不熟悉的话，那么就是任重而道远了</li></ol><p>关于Lambda表达式使用场景的话写的不是很好，因为自己也用的不多，以后还会继续补充，另外，如果只是从集合中过滤元素的话，还是LINQ的from in where select 语法组更加优美！</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;匿名对象&quot;&gt;&lt;a href=&quot;#匿名对象&quot; class=&quot;headerlink&quot; title=&quot;匿名对象&quot;&gt;&lt;/a&gt;匿名对象&lt;/h2&gt;&lt;h3 id=&quot;初始化方法&quot;&gt;&lt;a href=&quot;#初始化方法&quot; class=&quot;headerlink&quot; title=&quot;初始化方法&quot;&gt;&lt;/a&gt;初始化方法&lt;/h3&gt;&lt;figure class=&quot;highlight csharp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; obj = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; &amp;#123; Name = &lt;span class=&quot;string&quot;&gt;&quot;cfmy&quot;&lt;/span&gt;,Sex = &lt;span class=&quot;string&quot;&gt;&quot;M&quot;&lt;/span&gt;&amp;#125; ;&lt;span class=&quot;comment&quot;&gt;//单个匿名对象  &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; objs = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt;[]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; &amp;#123; Name = &lt;span class=&quot;string&quot;&gt;&quot;cfmy1&quot;&lt;/span&gt;, Sex = &lt;span class=&quot;string&quot;&gt;&quot;M&quot;&lt;/span&gt; &amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; &amp;#123; Name = &lt;span class=&quot;string&quot;&gt;&quot;cfmy2&quot;&lt;/span&gt;, Sex = &lt;span class=&quot;string&quot;&gt;&quot;M&quot;&lt;/span&gt; &amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; &amp;#123; Name = &lt;span class=&quot;string&quot;&gt;&quot;cfmy3&quot;&lt;/span&gt;, Sex = &lt;span class=&quot;string&quot;&gt;&quot;M&quot;&lt;/span&gt; &amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; &amp;#123; Name = &lt;span class=&quot;string&quot;&gt;&quot;cfmy4&quot;&lt;/span&gt;, Sex = &lt;span class=&quot;string&quot;&gt;&quot;M&quot;&lt;/span&gt; &amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; &amp;#123; Name = &lt;span class=&quot;string&quot;&gt;&quot;cfmy5&quot;&lt;/span&gt;, Sex = &lt;span class=&quot;string&quot;&gt;&quot;M&quot;&lt;/span&gt; &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &amp;#125;;&lt;span class=&quot;comment&quot;&gt;//匿名对象数组；注意 属性顺序，数量，类型都必须一致，否则提示找不到隐式数组的最佳类型&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; objCobj = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; &amp;#123; Name = &lt;span class=&quot;string&quot;&gt;&quot;cfmy&quot;&lt;/span&gt;, self = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; &amp;#123; Name = &lt;span class=&quot;string&quot;&gt;&quot;cfmy&quot;&lt;/span&gt; &amp;#125; &amp;#125;; &lt;span class=&quot;comment&quot;&gt;//嵌套匿名对象&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;初始化一个匿名对象之后，编译器会生成一个运行时类型(System.RunTimeType)，它是受保护的，它会根据初始化时的属性顺序，数量，类型构造出一个看不到的类型，它的所有属性都是只读的，只能在实例化时赋值&lt;br&gt;
    
    </summary>
    
    
      <category term="学习笔记" scheme="http://yoursite.com/tags/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
      <category term="匿名函数" scheme="http://yoursite.com/tags/%E5%8C%BF%E5%90%8D%E5%87%BD%E6%95%B0/"/>
    
      <category term="Lambda" scheme="http://yoursite.com/tags/Lambda/"/>
    
  </entry>
  
  <entry>
    <title>浅谈工厂模式</title>
    <link href="http://yoursite.com/2016/04/24/%E6%B5%85%E8%B0%88%E5%B7%A5%E5%8E%82%E6%A8%A1%E5%BC%8F/"/>
    <id>http://yoursite.com/2016/04/24/浅谈工厂模式/</id>
    <published>2016-04-24T09:58:48.000Z</published>
    <updated>2018-11-19T14:50:34.138Z</updated>
    
    <content type="html"><![CDATA[<h1 id="创建型模型"><a href="#创建型模型" class="headerlink" title="创建型模型"></a>创建型模型</h1><blockquote><p>创建型模型抽象了实例化过程，它们帮助一个系统独立于如何创建、组合和表示它的那些对象。<em>类创建型模型</em>使用继承改变实例化的类，而<em>对象创建模型</em>将实例化委托给另一个对象</p><p>在这些模式中有两个不断出现的主旋律。第一，他们都将关于该系统使用哪些具体的类的信息封装起来。第二，他们隐藏了这些类的示例是如何被创建和放在一起的。整个系统关于这些对象所知道的是有抽象类所定义的接口。因为，创建型模式在什么地方被创建，又谁创建，它是怎么被创建的，以及何时被创建这几个方面给予很大的灵活性。它们允许你用结构和功能差别很大的“产品”对象配置一个系统。配置可以是静态的（即编译时制定）。也可以是动态的（在运行时）</p></blockquote><p>目前创建型模型主要有  </p><ol><li>抽象工厂(ABSTRACT FACTORY)  </li><li>生成器(BUILDER)  </li><li>工厂方法(FACTORY METHOD)  </li><li>原型(PROTOTYPE)  </li><li>单件(SINGLETON)  </li></ol><a id="more"></a><p>本篇主要介绍工厂方法和抽象工厂，以下通过demo演示从<br>没有模式-&gt;简单工厂-&gt;工厂方法-&gt;抽象工厂 的过程</p><h2 id="简单工厂"><a href="#简单工厂" class="headerlink" title="简单工厂"></a>简单工厂</h2><p>假设你是一个农夫，你开垦了一块土地并准备大展身手，你打算先随便种点东西试一试土地合不合格，于是播撒下不知名野种，不久后长出了各式各样野果，这个过程中没有用到任何模式，落实到代码中就是<br><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">YG yeguo = <span class="keyword">new</span> YG();<span class="comment">//野果</span></span><br><span class="line">yeguo.bozhong();<span class="comment">//播种</span></span><br><span class="line">yeguo.jiaoshui();<span class="comment">//浇水</span></span><br><span class="line">yeguo.shouhuo();<span class="comment">//收获</span></span><br></pre></td></tr></table></figure></p><p>检验过土地之后，你准备开始正式种地了，目前的情况是你只有这一小块地，他一次只能种一类种子；种子可以买，但是并不是所有种子都是一个季度种植的。所以你打算根据季度来种下不同的种子，获得不同的产物（这里不考虑收获周期）。我们假设你打算春季种植大葱，秋季种植油菜，UML图如下</p><p><img src="https://cfmyhome-1256032936.cos.ap-shanghai.myqcloud.com/%E5%B7%A5%E5%8E%82%E6%A8%A1%E5%BC%8F.png" alt=""></p><p>这时候种植代码大致如下所示</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">Product product ;<span class="comment">//农作物</span></span><br><span class="line"><span class="keyword">switch</span>(Season)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">case</span> Spring:</span><br><span class="line">product = Shallot();<span class="comment">//大葱</span></span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> Fall:</span><br><span class="line">product = Rape();<span class="comment">//油菜</span></span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> Exception();</span><br><span class="line">&#125;</span><br><span class="line">product.bozhong();<span class="comment">//播种</span></span><br><span class="line">product.jiaoshui();<span class="comment">//浇水</span></span><br><span class="line">product.shouhuo();<span class="comment">//收获</span></span><br></pre></td></tr></table></figure><p>我们假设把实例化农作物那部分代码封装到一个类<code>Factory</code>里面，这个类返回一个<code>Product</code>实例，那么即是<strong>简单工厂</strong></p><p>这时候Client代码如下所示</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Pruduct product = (<span class="keyword">new</span> Factory()).CreatePruduct();</span><br><span class="line">product.bozhong();<span class="comment">//播种</span></span><br><span class="line">product.jiaoshui();<span class="comment">//浇水</span></span><br><span class="line">product.shouhuo();<span class="comment">//收获</span></span><br></pre></td></tr></table></figure><p>在简单工厂中，我们将大葱和油菜抽象为农作物，它们共同继承了农作物，实现了农作物的三个接口，它们共同组成了产品部分；然后将实例化部分代码封装进工厂类中，这样你就不无需关注产品是如何实例化的，也不知道实例化对象具体是哪个产品，反正你只需要操作他的接口方法就可以了</p><p>在简单工厂中，假设你需要新增一个农产品–萝卜，你需要新增一个萝卜类，并让它实现农产品接口的几个接口方法，这看起来没什么难的。但是！你还要修改工厂方法中的实例化过程（示例中的<code>switch case</code>那段代码），不然它永远不会帮你实例化一个萝卜出来，这样的话工厂方法中就违反了一个设计模式中的基本原则–<strong>开放封闭原则</strong>，即对修改封闭，对扩展开放，我们可以新增类，但不能轻易修改已经存在的类。这个问题也有一些取巧的方法处理，利用反射来实例化不同产品。综上，简单工厂严格意义上来说并不算一个合格的设计模式，它只不过利用产品接口来统一产品类别，再将实例化方法封装到一个单独的类别中，并没有什么扩展性可言，在不修改旧代码的情况下可以说无法扩展</p><h3 id="简单工厂的优缺点"><a href="#简单工厂的优缺点" class="headerlink" title="简单工厂的优缺点"></a>简单工厂的优缺点</h3><ol><li>通过接口调用不同实例的方法，符合面向接口编程的基本思路，减轻了客户端和具体产品类的耦合</li><li>将实例化的过程封装到一个具体工厂类中，客户无需关注自己实例化过程，进一步减轻了客户的负担，但是如果增加新的产品，这个具体工厂类就必须修改自己的实例化过程代码，不符合开放封闭原则</li><li>通过接口调用的缺点：产品接口中的方法一旦确定就无法改变，因为一旦改变就要修改其所有子类</li></ol><h3 id="工厂类中反射"><a href="#工厂类中反射" class="headerlink" title="工厂类中反射"></a>工厂类中反射</h3><p>反射大致思路有几种   </p><ol><li>构造工厂类是传入类名，以此反射   </li><li>工厂类内部根据某个配置项或某个变量值，以此反射   </li></ol><h2 id="工厂方法"><a href="#工厂方法" class="headerlink" title="工厂方法"></a>工厂方法</h2><p>在简单工厂模式下，你在一块土地上种植了大葱、油菜、花生、玉米等等农作物，工厂类总是能帮你实例出各种应季农作物，你只要做好自己的工作（播种，浇水，收获），如此就够了。随着时间的流逝，你膨胀了，你觉得自己应该扩张一块地，用来种植一些经济作物，比如水果、烟草。但是简单工厂模式下无法满足这个扩展，因为工厂类只有一个，那么我们尝试把工厂类抽象化，再把农作物和经济作物抽象为作物，UML图如下</p><p><img src="https://cfmyhome-1256032936.cos.ap-shanghai.myqcloud.com/%E5%B7%A5%E5%8E%82%E6%A8%A1%E5%BC%8F3%20%282%29.png" alt=""></p><p>图中的土地和工厂统一为一个类，不做区分。这时候Client不单单是简单的调用工厂的<code>CreatePruduct</code>获取实例了，因为首先需要先选择一个工厂子类（土地A或土地B），这种情况下如果在新增一个作物类型，也只需要新增一个工厂类和对应的作物类就可以，这个时候你的注意力比以前高了一个维度，之前你关注土地种出的具体作物是萝卜还是油菜，现在只需要关注它是农作物还是经济作物就可以，至于具体农作物种植什么，可以在农作物中通过简单工厂方法实现</p><h2 id="抽象工厂"><a href="#抽象工厂" class="headerlink" title="抽象工厂"></a>抽象工厂</h2><p>随着时光的流逝，你的工厂和土地已经扩充到了960万平方公里，地球上能中的东西都被你种了一个遍，收获的作物可以到地球三十圈，这时候你突然发现了转基因这个概念，你将继续扩充土地，支持转基因作物</p><p>这时UML图变成下图</p><p><img src="https://cfmyhome-1256032936.cos.ap-shanghai.myqcloud.com/%E5%B7%A5%E5%8E%82%E6%A8%A1%E5%BC%8F3%20%283%29.png" alt=""></p><p>这时你可以在转基因和非转基因这个增面进行扩张，而作物类别已经无法进行扩张了，因为你个抽象工厂已经确定了只能生产农作物和经济作物</p><h2 id="适用性"><a href="#适用性" class="headerlink" title="适用性"></a>适用性</h2><ul><li>一个系统要独立于它的产品的创建、组合和表示时</li><li>一个系统要由多个产品系列中的一个来配置时</li><li>当你要强调一系列相关的产品对象的设计以便进行联合使用时</li><li>当你提供你个产品类库，而只想显示它们的接口而不是实现时</li></ul><h2 id="效果"><a href="#效果" class="headerlink" title="效果"></a>效果</h2><ol><li><em>他分离了具体的类</em> 因为一个工厂封装创建产品对象的责任和过程，它将客户和类的实现分离。客户通过它们的抽象接口操纵实例。产品的类名也在具体工厂的实现中被分离；它们不出现在客户代码中</li><li><em>它使得易于交换产品系列</em> 一个具体工厂类在一个应用仅出现以此–即在它初始化的时候。这使得改变一个应用的具体工厂变得容易。它只需改变具体的工厂既可以使用不同的产品配置，这是因为一个抽象工厂创建了一个完整的产品系列，所以整个产品系列会立刻改变</li><li><em>他有利于产品的一致性</em> 当一个系列中的产品对象被设计成一起工作时，一个应用一次只能使用同一个系列中的对象</li><li><em>难以支持新品种的产品</em> 难以扩展抽象工厂以生产新种类的产品。这是因为抽象工厂接口确定了可以被创建的产品集合。支持心种类的产品就需要扩展该工厂接口，这将涉及所有子类的改变</li></ol><h1 id="参照"><a href="#参照" class="headerlink" title="参照"></a>参照</h1><ul><li>《设计模式-可复用面向对象软件的基础》</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;创建型模型&quot;&gt;&lt;a href=&quot;#创建型模型&quot; class=&quot;headerlink&quot; title=&quot;创建型模型&quot;&gt;&lt;/a&gt;创建型模型&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;创建型模型抽象了实例化过程，它们帮助一个系统独立于如何创建、组合和表示它的那些对象。&lt;em&gt;类创建型模型&lt;/em&gt;使用继承改变实例化的类，而&lt;em&gt;对象创建模型&lt;/em&gt;将实例化委托给另一个对象&lt;/p&gt;
&lt;p&gt;在这些模式中有两个不断出现的主旋律。第一，他们都将关于该系统使用哪些具体的类的信息封装起来。第二，他们隐藏了这些类的示例是如何被创建和放在一起的。整个系统关于这些对象所知道的是有抽象类所定义的接口。因为，创建型模式在什么地方被创建，又谁创建，它是怎么被创建的，以及何时被创建这几个方面给予很大的灵活性。它们允许你用结构和功能差别很大的“产品”对象配置一个系统。配置可以是静态的（即编译时制定）。也可以是动态的（在运行时）&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;目前创建型模型主要有  &lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;抽象工厂(ABSTRACT FACTORY)  &lt;/li&gt;
&lt;li&gt;生成器(BUILDER)  &lt;/li&gt;
&lt;li&gt;工厂方法(FACTORY METHOD)  &lt;/li&gt;
&lt;li&gt;原型(PROTOTYPE)  &lt;/li&gt;
&lt;li&gt;单件(SINGLETON)  &lt;/li&gt;
&lt;/ol&gt;
    
    </summary>
    
    
      <category term="学习笔记" scheme="http://yoursite.com/tags/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
      <category term="设计模式" scheme="http://yoursite.com/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>浅谈正则</title>
    <link href="http://yoursite.com/2016/04/08/%E6%B5%85%E8%B0%88%E6%AD%A3%E5%88%99/"/>
    <id>http://yoursite.com/2016/04/08/浅谈正则/</id>
    <published>2016-04-08T12:14:56.000Z</published>
    <updated>2018-04-11T08:40:29.814Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>最近遇到这样一段代码</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> reg= <span class="regexp">/&lt;td class="bold"&gt;(\d+)&lt;\/td&gt;&lt;td class="xxxx"&gt;([\d\,]+?)&lt;\/td&gt;/</span>；</span><br><span class="line">match=str.match(reg);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(!match) <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'数据不正确'</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span>&#123;</span><br><span class="line"><span class="keyword">var</span> data=&#123;</span><br><span class="line">type:type,</span><br><span class="line">time:match[<span class="number">1</span>].replace(<span class="regexp">/^(\d&#123;4&#125;)(\d&#123;2&#125;)(\d&#123;2&#125;)\d&#123;2&#125;/</span>, <span class="string">'$1-$2-$3 '</span>)<span class="string">",</span></span><br><span class="line"><span class="string">number:match[1].replace(/^(\d&#123;8&#125;)(\d&#123;2&#125;)$/, '$1-$2'),</span></span><br><span class="line"><span class="string">data:match[2]</span></span><br><span class="line"><span class="string">&#125;;</span></span><br><span class="line"><span class="string">return data;</span></span><br><span class="line"><span class="string">&#125;catch(err)&#123;</span></span><br><span class="line"><span class="string">throw('解析数据失败');</span></span><br><span class="line"><span class="string">&#125;</span></span><br></pre></td></tr></table></figure><p>正则匹配的过程很好看懂，但是后面<code>match[1]</code>和<code>match[2]</code>是什么鬼啊，还有<code>replace(/^(\d{8})(\d{2})$/, &#39;$1-$2&#39;)</code>中第二个参数是什么含义也搞不懂，平时总用不到正则，导致我前前后后重新看了好几遍，第一遍大致了解了所有<em>元字符</em>含义（但是时间久就忘记了）；第二次好像是发现了<em>贪婪模式和懒惰模式</em>；这次又学会了<em>反向引用</em>，之后没准又发现漏掉什么重点，所以赶紧整理一下<br><a id="more"></a></p><h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>首先正则表达式的出现是为了描述或者匹配一系列匹配某个句法规则的字符串，一个正则表达式通常被称为一个<em>模式（pattern）</em>，目前大部分语言都支持正则匹配，所以也算是一种通用技术</p><blockquote><p>正则表达式，又称正规表示式、正规表示法、正规表达式、规则表达式、常规表示法（英语：Regular Expression，在代码中常简写为regex、regexp或RE），计算机科学的一个概念。正则表达式使用单个字符串来描述、匹配一系列匹配某个句法规则的字符串。在很多文本编辑器里，正则表达式通常被用来检索、替换那些匹配某个模式的文本。</p><p>许多程序设计语言都支持利用正则表达式进行字符串操作。例如，在Perl中就内建了一个功能强大的正则表达式引擎。正则表达式这个概念最初是由Unix中的工具软件（例如sed和grep）普及开的。正则表达式通常缩写成“regex”，单数有regexp、regex，复数有regexps、regexes、regexen。</p></blockquote><h2 id="匹配原理"><a href="#匹配原理" class="headerlink" title="匹配原理"></a>匹配原理</h2><p>详戳<a href="http://www.runoob.com/regexp/regexp-syntax.html" target="_blank" rel="noopener">菜鸟驿站-正则表达式</a>，是目前我找到的最详细全面的介绍</p><h2 id="关于贪婪模式"><a href="#关于贪婪模式" class="headerlink" title="关于贪婪模式"></a>关于贪婪模式</h2><p>正则引擎默认是贪婪模式，什么是贪婪模式呢？贪婪模式是尽可能多的匹配所搜索的字符串。例如，对于字符串 <code>oooo</code>，<code>o+?</code> 将匹配单个 <code>o</code>，而 <code>o+</code> 将匹配所有 <code>o</code>。其中后者就是贪婪模式，防止贪婪模式的方法就是在量词<code>(*, +, ?, {n}, {n,}, {n,m})</code> 后面加一个<code>？</code>，<strong>如果你想要在一个字符串<code>Hello World</code>中匹配以<code>He</code>开头的单词，那肯定要用非贪婪模式</strong>，因为我要返回对象是一个匹配的集合，而不是布尔</p><h2 id="关于反向引用"><a href="#关于反向引用" class="headerlink" title="关于反向引用"></a>关于反向引用</h2><blockquote><p>对一个正则表达式模式或部分模式两边添加圆括号将导致相关匹配存储到一个临时缓冲区中，所捕获的每个子匹配都按照在正则表达式模式中从左到右出现的顺序存储。缓冲区编号从 1 开始，最多可存储 99 个捕获的子表达式。每个缓冲区都可以使用 ‘\n’ 访问，其中 n 为一个标识特定缓冲区的一位或两位十进制数。<br>可以使用非捕获元字符 ‘?:’、’?=’ 或 ‘?!’ 来重写捕获，忽略对相关匹配的保存。</p></blockquote><p>这个就是前言中<code>match[1]</code>和<code>match[2]</code>的原理，其实<code>match[1]</code>和<code>match[2]</code>代表的是两个子匹配的值而已</p><h2 id="不同语言中的区别"><a href="#不同语言中的区别" class="headerlink" title="不同语言中的区别"></a>不同语言中的区别</h2><p>虽然匹配规则都是一样的语法，但是不同语言中的用法和返回对象是不同的，js中在<code>/pattern/</code>后面加修饰符<code>m</code>、<code>g</code>、<code>i</code>分别表示多行匹配、全局匹配、不区分大小写匹配；而C#中是通过构造函数多传一个枚举值达到类似效果</p><p>在匹配对象的属性和方法中，C#和js也有很大区别，C#匹配集合几乎没有什么方法，只有几个<code>value</code>,<code>length</code>,<code>index</code>的属性，而js中扩展了很多内容，比如RegExp对象新增了<code>test()</code>、<code>exec()</code>以及 <code>compile()</code>方法，而且js中String对象也扩展了关于正则表达式的方法,包括<code>search</code>,<code>match</code>,<a href="http://www.w3school.com.cn/jsref/jsref_replace.asp" target="_blank" rel="noopener">replace</a>,<code>split</code>,前言中的<code>match[1].replace([pattern],[replacement])</code>就是如此,此方法的第一个参数是一个正则规则，第二个参数通过$代表子表达式或者子串用来生成新的串</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;最近遇到这样一段代码&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; reg= &lt;span class=&quot;regexp&quot;&gt;/&amp;lt;td class=&quot;bold&quot;&amp;gt;(\d+)&amp;lt;\/td&amp;gt;&amp;lt;td class=&quot;xxxx&quot;&amp;gt;([\d\,]+?)&amp;lt;\/td&amp;gt;/&lt;/span&gt;；&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;match=str.match(reg);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(!match) &lt;span class=&quot;keyword&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;Error&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&#39;数据不正确&#39;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;try&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; data=&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		type:type,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		time:match[&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;].replace(&lt;span class=&quot;regexp&quot;&gt;/^(\d&amp;#123;4&amp;#125;)(\d&amp;#123;2&amp;#125;)(\d&amp;#123;2&amp;#125;)\d&amp;#123;2&amp;#125;/&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;$1-$2-$3 &#39;&lt;/span&gt;)&lt;span class=&quot;string&quot;&gt;&quot;,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;string&quot;&gt;		number:match[1].replace(/^(\d&amp;#123;8&amp;#125;)(\d&amp;#123;2&amp;#125;)$/, &#39;$1-$2&#39;),&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;string&quot;&gt;		data:match[2]&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;string&quot;&gt;	&amp;#125;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;string&quot;&gt;	return data;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;string&quot;&gt;&amp;#125;catch(err)&amp;#123;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;string&quot;&gt;	throw(&#39;解析数据失败&#39;);&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;string&quot;&gt;&amp;#125;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;正则匹配的过程很好看懂，但是后面&lt;code&gt;match[1]&lt;/code&gt;和&lt;code&gt;match[2]&lt;/code&gt;是什么鬼啊，还有&lt;code&gt;replace(/^(\d{8})(\d{2})$/, &amp;#39;$1-$2&amp;#39;)&lt;/code&gt;中第二个参数是什么含义也搞不懂，平时总用不到正则，导致我前前后后重新看了好几遍，第一遍大致了解了所有&lt;em&gt;元字符&lt;/em&gt;含义（但是时间久就忘记了）；第二次好像是发现了&lt;em&gt;贪婪模式和懒惰模式&lt;/em&gt;；这次又学会了&lt;em&gt;反向引用&lt;/em&gt;，之后没准又发现漏掉什么重点，所以赶紧整理一下&lt;br&gt;
    
    </summary>
    
    
      <category term="学习笔记" scheme="http://yoursite.com/tags/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
      <category term="正则表达式" scheme="http://yoursite.com/tags/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>关于windows消息队列机制的臆想</title>
    <link href="http://yoursite.com/2016/03/27/%E5%85%B3%E4%BA%8Ewindows%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97%E6%9C%BA%E5%88%B6%E7%9A%84%E8%87%86%E6%83%B3/"/>
    <id>http://yoursite.com/2016/03/27/关于windows消息队列机制的臆想/</id>
    <published>2016-03-27T05:15:29.000Z</published>
    <updated>2018-11-19T14:50:36.938Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://cfmyhome-1256032936.cos.ap-shanghai.myqcloud.com/5-1.gif" alt="&quot;图片来源网络&quot;"></p><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>此文写于2016年，虽然目前为止微软已经有些下埔路的趋势，但不可否认过去几十年的微软是无敌的，PC用户依然被微软垄断，随着越来越多的移动终端出现，应用越来越复杂，微软也无法逆转长江后浪推前浪的趋势，只能紧跟时代步伐，推出winPhone，免费升级win10，.Net开源，推广XBOX视频游戏机。<br><a id="more"></a><br>帝国终将毁灭，错并不在微软的运营之类的因素，因为微软无法阻止人类的善变和好奇，无法阻止新技术的出现。从编程角度考虑，我设计了一种框架可以很好处理未来10年的所有能想到需求，但可能五年后需求已经衍生至我没有考虑到的地方了，怎么办，难道放弃掉实现好的东西，迁到更好的框架中去吗？不可能，我只能眼睁睁看着别人在新的框架中很便利的处理问题（甚至别人框架很多地方都借鉴了我的）。</p><p>说了那么多没用的，还是说说windows吧，由于微软的地位，大部分PC应用和服务都是基于windows的，windows操作系统最大的特点就是商业化，当电脑都没有普及的时候，他靠着图形界面为主的操作系统以及丰富的软件应用向企业用户和个人用户推广，最终走向成功。从很早前（其实也就一年前）我就在考虑，这样一个图形界面是如何设计实现的，最近终于有了大致思路。</p><p>由于只是臆想，肯定有些不成熟的思路和不准确的概念，所以此文只是自己的一些理解，就不去引用太多权威论证了。</p><h2 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h2><p>从按下机箱的开机键开始到载入操作系统这部分我就不说了（基础不行），好了，现在进入桌面了，windows的图形界面映入眼帘，我靠，酷，仅仅通过鼠标和键盘就能实现与操作系统的交互。为什么我鼠标移动之后，显示器上的东西也可以跟着动呢？我以前在学了半个月编程后其实大致就有个思路，操作系统中有个东西在检视着鼠标的动作，按下键，松开键，移动。</p><p>但随之而来的疑问有两个：  </p><ol><li>如果我点的是不同的应用程序，比如我在浏览器的网页中右键，系统是如何知道我想要操作浏览器还是其他应用程序的   </li><li>如果真的有一个东西在监视我的操作的话，那它应该是很蠢的轮询操作，就是<code>while(ture)</code>这种应该是很损耗性能的才对吧？</li></ol><p>后来过了大概一年吧，我换了一份工作，那时候我对windows的理解已经更深了一层，对进城，线程，窗体，句柄都有些感悟了，于是以第一个疑问迎刃而解，操作确实会产生一个消息，比如鼠标点击会产生一个点击事件，这个消息中包含着事件的触发者，句柄等信息，可以理解为这个消息的发出者，以及发出地点，这样就可以区分出对不同应用程序的操作。但是第二个疑问还是没有解决，我也没在意就想别的事情去了</p><p>直到前不久我接触到nodejs时候，了解到nodejs用的事件驱动模型，才发现这个模型跟windows图形界面的消息队列机制是类似的，只不过windows使用在界面操作消息分发上，而nodejs用在网络I/O请求分发上，简单来看他们都时为了处理异步消息的非阻塞模型，除了用途不同外，还有个很大的区别就是nodejs是单线程处理（如果你是开发者，肯定会有疑问单线程如何实现异步，详细可以<a href="http://www.cnblogs.com/dolphinX/p/3475090.html" target="_blank" rel="noopener">戳这里</a>），而windows是多线程处理，那么，谈谈我现在对windows消息机制的理解吧</p><p>首先Windows肯定有一个全局的消息队列，用来监听操作者的操作，比如键盘输入或者鼠标点击，如上图的SystemQueue；每个应用程序也拥有自己的队列，当我点击鼠标后，会在消息全局消息队列中插入一条点击的消息（也可能直接插入到应用程序队列中，这里不考虑这种情况），系统会先看消息产生的句柄，来判断是我来处理，还是给别人处理，假设我是在网页上点击 的，那就把这个消息推给浏览器消息队列中，浏览器发现了消息，决定自己要做什么样的处理。如果这样的话，岂不是每个应用程序都要轮询监视着自己的消息队列来判断是否有新的信息需要处理 ？</p><p>其实不是的，这涉及到编程中的委托和事件，有编程经验的肯定见过 <code>事件+=委托</code>这种写法，一个事件可以绑定多个委托，其实就是一种订阅模式，windows中的消息队列中也是用了同样的原理</p><p>其实浏览器一开始就定义好了所有的事件和委托，比如一个关闭按钮，他的事件是鼠标的click动作，委托是关闭窗口的实现，浏览器会先把他们注册到消息队列中去，他会告诉消息队列，如果发生了这样的事件，你就用这个委托关闭窗体。浏览器消息队列心里哪受得了这个，不干了，你让我一辈子就监视你们这点破事吗？于是他跑去系统的全局消息队列注册，他跟全局消息队列说，如果有浏览器相关的事件发生，你叫我一下，我好处理，ok？好，我去睡觉了（线程阻塞）。这样所有的事件和委托全部关联上了，傻乎乎的全局消息队列监视着用户的一举一动，并把消息事件按照注册好的委托一个个执行。</p><p>看上去整个流程似乎是没什么问题，其实只是后面没问题了，系统全局消息队列真的会傻乎乎的轮询自己的消息队列吗？我觉得肯定不是，他大概也用到 一样的机制，把自己所有的事情通过手段直接注册到鼠标键盘等输入设备上。于是最终的结果就是，他们都不傻！！都不是靠傻乎乎的轮询操作，通过订阅注册机制建立起各种各样的链接，用户的一举一动通过一条条线条最后落到每个应用程序的具体实现！！</p><p>以上过程忽视了完成委托后的回调过程，实际上最底层完成委托后还要一层层回调的上层（不是所有地方都需要回调），有了回调就以为了异步，假如某个应用程序消息队列有数个消息等待处理，那么他会会为每个消息开一个子线程处理委托，再通过回调函数向上传递结果，所以我们实际使用中经常遇到一个应用程序未响应，但是其他的都好好的，因为他们肯定是在不同的线程中。但有的时候很多程序一起未响应，那可能是虽然线程不同，但是他们用到了同一个资源未响应，导致他们全部卡主无法回调上层。但是问题肯定不止这么简单，还有很多细节需要思考，这只是现阶段我的理解而已</p><h2 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h2><p>本来感冒了准备吃好药就去睡觉的，但还是写到了很晚才结束，独自一人来外地工作还是做技术，相信这种感受一般人很难理解，尽在不言中。</p><p>每当我读到那些优秀的技术博文时，都会看下发布时间，很多都是五六年前的，甚至更早，我不禁思考，技术究竟是什么，他并非凭空产生，而是从人类社会中抽象而来，不断的积累沉淀衍生，想要在某个层次做好，就必须要了解底层的实现，就像消息机制一样，层层调用。对于我等开发来说就是四个字，学无止境。就像此文，作为一个.Net开发者，不得不了解自己底层的操作系统某些原理，你想真正在某个领域做到极致是不可能的，因为领域间并不存在完全的界限，所以我对此的态度就是八个字尽力而为，问心无愧。</p><p>这次离职后下一份工作可能会做一份java相关的，因为java现在的资源情况比.Net好太多了，之后我将不拘泥代码细节，更多精力花在设计、部署和其它开源技术方向。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://cfmyhome-1256032936.cos.ap-shanghai.myqcloud.com/5-1.gif&quot; alt=&quot;&amp;quot;图片来源网络&amp;quot;&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;此文写于2016年，虽然目前为止微软已经有些下埔路的趋势，但不可否认过去几十年的微软是无敌的，PC用户依然被微软垄断，随着越来越多的移动终端出现，应用越来越复杂，微软也无法逆转长江后浪推前浪的趋势，只能紧跟时代步伐，推出winPhone，免费升级win10，.Net开源，推广XBOX视频游戏机。&lt;br&gt;
    
    </summary>
    
    
      <category term="观点" scheme="http://yoursite.com/tags/%E8%A7%82%E7%82%B9/"/>
    
      <category term="windows" scheme="http://yoursite.com/tags/windows/"/>
    
  </entry>
  
  <entry>
    <title>Windows修复补丁1.2</title>
    <link href="http://yoursite.com/2016/03/19/Windows%E4%BF%AE%E5%A4%8D%E8%A1%A5%E4%B8%811.2/"/>
    <id>http://yoursite.com/2016/03/19/Windows修复补丁1.2/</id>
    <published>2016-03-19T08:25:11.000Z</published>
    <updated>2018-11-19T14:50:37.601Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://cfmyhome-1256032936.cos.ap-shanghai.myqcloud.com/1-1.jpg?imageView2/2/w/450/h/350" alt="" title="围棋大战"><br><strong>阿尔法狗和李世石</strong>，一时间成为了热门词汇，随之而来围棋小王子柯洁也开始走进了公众视野，一周时间微博粉丝从2万涨到43万，如果没有阿尔法狗的这次挑战赛，还有多少人记得围棋这种东西。《几张图教你看懂围棋》之类的图文竟被疯狂转发。<br><a id="more"></a><br><img src="https://cfmyhome-1256032936.cos.ap-shanghai.myqcloud.com/1-3.png?imageView2/2/w/450/h/350" alt="" title="Java 架构"><br><strong>学习成本低了，但不会的东西更多了。</strong>就像看懂围棋一样，你可以不用任何成本，在网上随便看看视频就可以入门。但是新事物衍生速度是远大于你的学习速度，随之而来无数新的概念和新的定义，如果遇到什么学什么，会不会变成一个白学家（大雾）？</p><p><img src="https://cfmyhome-1256032936.cos.ap-shanghai.myqcloud.com/1-4.gif" alt="" title="“白学家”来源"><br><strong>概念乱用=颠覆？</strong>把一个名字拖到另一个环境下算是颠覆吗？大部分事物的概念越来越模糊，如果起一个不容易理解的名字，被人用作别的地方，错在谁身上呢？把听上去高大上的概念强加别的领域还自称颠覆，真的不是自欺欺人吗？</p><p><img src="https://cfmyhome-1256032936.cos.ap-shanghai.myqcloud.com/1-2.jpg?imageView2/2/w/450/h/350" alt="" title="请问您今天要来点兔子吗"><br><strong>标准太少，领域太多。</strong>类似的“自定义”行为还有很多，比如小说宣传语动不动最感人肺腑的故事，智能产品动不动最人性化的体验，打个游戏动不动国服第一XX，做个网站动不动国内XX第一站点（平台、门户），连写个段子都是江南最大皮革厂，真的有把同类全拉来过来排个序确认过自己是NO1吗？</p><p><img src="https://cfmyhome-1256032936.cos.ap-shanghai.myqcloud.com/1-5.jpg?imageView2/2/w/450/h/350" alt="" title="兵库北 19℃"><br><strong>稍微低调一点就会死，</strong>中华民族虽然有着谦逊的美德，但骨子里却是一只骄傲无比的公鸡，没有信仰其实就是老子最大的意思，大部分都是名副其实的不装逼会死星人，这种现象在商业模式下演变的更为过分，当所有人都可以若无其事的装逼时且不会受到制裁时，检验一个人的能力就变成了检验一个人的装逼功底。看来离吹牛上税的日子不远了</p><p><img src="https://cfmyhome-1256032936.cos.ap-shanghai.myqcloud.com/1-6.jpg?imageView2/2/w/450/h/350" alt=""><br><strong>牢骚太多</strong>防肠断，说了很多废话，最后引用刘墉的一段话作为结尾</p><blockquote><p>急迫是否已经成为你的习惯?急着拼搏又急着放松，急着工作又急着度假。像没头苍蝇东撞西撞，只是无目的的赚钱花钱？工作得肩颈酸痛眼睛疲劳，有点空却急着打电玩说是为了放松？一杯搅动的水，怎么让杂质沉淀？跑完工作又跑着玩耍的腿，怎能得到休息？停停吧！别骗自己了!别让自己连停的能力都失去了！</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://cfmyhome-1256032936.cos.ap-shanghai.myqcloud.com/1-1.jpg?imageView2/2/w/450/h/350&quot; alt=&quot;&quot; title=&quot;围棋大战&quot;&gt;&lt;br&gt;&lt;strong&gt;阿尔法狗和李世石&lt;/strong&gt;，一时间成为了热门词汇，随之而来围棋小王子柯洁也开始走进了公众视野，一周时间微博粉丝从2万涨到43万，如果没有阿尔法狗的这次挑战赛，还有多少人记得围棋这种东西。《几张图教你看懂围棋》之类的图文竟被疯狂转发。&lt;br&gt;
    
    </summary>
    
    
      <category term="吐槽" scheme="http://yoursite.com/tags/%E5%90%90%E6%A7%BD/"/>
    
  </entry>
  
  <entry>
    <title>浅谈Base64转码</title>
    <link href="http://yoursite.com/2016/03/14/%E6%B5%85%E8%B0%88Base64%E8%BD%AC%E7%A0%81/"/>
    <id>http://yoursite.com/2016/03/14/浅谈Base64转码/</id>
    <published>2016-03-14T08:40:40.000Z</published>
    <updated>2018-11-19T14:50:36.299Z</updated>
    
    <content type="html"><![CDATA[<h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>首先要理解Base64是一种二进制数据的表示方法，它只是一种表达形式，并不是加密，也不是压缩字符长度。惯例引用wiki概述：</p><blockquote><p>Base64是一种基于64个可打印字符来表示二进制数据的表示方法。由于2的6次方等于64，所以每6个比特为一个单元，对应某个可打印字符。三个字节有24个比特，对应于4个Base64单元，即3个字节需要用4个可打印字符来表示。它可用来作为电子邮件的传输编码。在Base64中的可打印字符包括字母A-Z、a-z、数字0-9，这样共有62个字符，此外两个可打印符号在不同的系统中而不同。一些如uuencode的其他编码方法，和之后binhex的版本使用不同的64字符集来代表6个二进制数字，但是它们不叫Base64。</p><p>Base64常用于在通常处理文本数据的场合，表示、传输、存储一些二进制数据。包括MIME的email、在XML中存储复杂数据。</p></blockquote><a id="more"></a><h2 id="转换原理"><a href="#转换原理" class="headerlink" title="转换原理"></a>转换原理</h2><p>由于Base64是针对字节进行转码的，对于一般的文本，需要先按照其编码格式转换为字节数组，然后在将字节数组转为Base64串。其实现过程wiki有一个非常直观的表格，如下图</p><p><img src="https://cfmyhome-1256032936.cos.ap-shanghai.myqcloud.com/QQ%E6%88%AA%E5%9B%BE20160314135213.png" alt="" title="Base64转换过程"></p><p>这里注意一点就是字母<code>M</code>在ASCII编码中占一个字节，但是如果在其他编码中不一定是一个字节，所以在转码过程中一定要注意到文本编码的问题，不同编码格式的文本转换出的Base64串也很可能不同</p><p>另外，无论是单字节编码还是双字节编码的文本，都会面临一个问题，即一个字节占8比特，8的倍数不能全被6整除，假设上面wiki的例子中只转换字母<code>M</code>（ASCII编码下），<em>M</em>的八位比特位分别是<em>01001101</em>，如果转换Base64的话，前面的<em>010011</em>可以转换为<em>T</em>，但是后面剩下<em>01</em>不足6位，这时候规定是不足6位比特时在后面补<em>0</em>，01后面补4个0就变成<em>010000</em>，对应Base64编码中的<code>Q</code>，但是因为你是补位后的转换，为了和正常的转换进行区分，需要在最后加入一个或两个<code>=</code></p><p><strong>即：</strong><br>补了4个0的情况，末尾加2个<code>=</code><br>补了2个0的情况，末尾加1个<code>=</code><br>所以刚才的字母<code>M</code>（ASCII编码下）转为Base64时会变为<code>TQ==</code> </p><p>顺便引用一下wiki对于补位的解释和示例</p><p><img src="https://cfmyhome-1256032936.cos.ap-shanghai.myqcloud.com/QQ%E6%88%AA%E5%9B%BE20160314143830.png" alt=""></p><h2 id="NET环境下的转码问题"><a href="#NET环境下的转码问题" class="headerlink" title=".NET环境下的转码问题"></a>.NET环境下的转码问题</h2><p>.NET中的Convert类已经封装好了Base64与字节数组的转换方法，分别是<br>Convert.ToBase64String(byte[] inArray)和Convert.FromBase64String(string s)</p><p>.NET中还有一个将字符串转为字节数组的方法叫做Encoding.[编码集].GetBytes(string s)。我之前不理解Base64，不清楚这两个转换方法有什么区别。从.NET的注释来看GetBytes是<code>在派生类中重写时，将指定字符串中的所有字符编码为一个字节序列</code>,而FromBase64String是<code>将指定的字符串（它将二进制数据编码为 Base64 数字）转换为等效的 8 位无符号整数数组</code>，为了明确二者联系，我做了一个实验如下：</p><p><img src="https://cfmyhome-1256032936.cos.ap-shanghai.myqcloud.com/QQ%E6%88%AA%E5%9B%BE20160314105920.png" alt=""></p><p>我先讲字符串按照UTF-8和Unicode编码转为字节数组，然后转为Base64，可以看出二者是不同的，然后在按照Base64格式、UTF-8格式和Unicode格式解析为字节数组，最后再把4个字节数组按照UTF-8和Unicode转为字符串，最后生成了8组字符串。</p><p>最终成功还原的是rst1和rst4，可以看出这两个其实走的同一个路线，即</p><p>Encoding.[编码集].GetBytes() -&gt; Convert.ToBase64String -&gt; Convert.FromBase64String -&gt; Encoding.[相同编码集].GetString</p><p>通过这个实验我也理解了GetBytes和FromBase64String虽然入参和出参想同，但其实是两个概念。FromBase64String是先把字符串按照Base64规则(6比特=1字符)转为比特位，然后在按照8比特为一单位进行分割，而GetBytes方法只不过是按照字符的编码格式转成8比特为一单位的数组而已。比如字母<code>M</code>的Base64流为<code>TQ==</code>，用FromBase64String会变为<code>[01001101](十进制为[77])</code>,用GetBytes把每一个字符都转为一个字节，假设是UTF8.GetBytes结果会是<code>[01010100,01010001,00111101,00111101](十进制为[84,81,61,61])</code></p><h2 id="参照"><a href="#参照" class="headerlink" title="参照"></a>参照</h2><p>维基百科-Base64：<a href="https://zh.wikipedia.org/wiki/Base64" target="_blank" rel="noopener">https://zh.wikipedia.org/wiki/Base64</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;概述&quot;&gt;&lt;a href=&quot;#概述&quot; class=&quot;headerlink&quot; title=&quot;概述&quot;&gt;&lt;/a&gt;概述&lt;/h2&gt;&lt;p&gt;首先要理解Base64是一种二进制数据的表示方法，它只是一种表达形式，并不是加密，也不是压缩字符长度。惯例引用wiki概述：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Base64是一种基于64个可打印字符来表示二进制数据的表示方法。由于2的6次方等于64，所以每6个比特为一个单元，对应某个可打印字符。三个字节有24个比特，对应于4个Base64单元，即3个字节需要用4个可打印字符来表示。它可用来作为电子邮件的传输编码。在Base64中的可打印字符包括字母A-Z、a-z、数字0-9，这样共有62个字符，此外两个可打印符号在不同的系统中而不同。一些如uuencode的其他编码方法，和之后binhex的版本使用不同的64字符集来代表6个二进制数字，但是它们不叫Base64。&lt;/p&gt;
&lt;p&gt;Base64常用于在通常处理文本数据的场合，表示、传输、存储一些二进制数据。包括MIME的email、在XML中存储复杂数据。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="学习笔记" scheme="http://yoursite.com/tags/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
      <category term="Base64" scheme="http://yoursite.com/tags/Base64/"/>
    
  </entry>
  
  <entry>
    <title>浅谈HTTP协议中的Content-Type</title>
    <link href="http://yoursite.com/2016/03/12/%E6%B5%85%E8%B0%88HTTP%E5%8D%8F%E8%AE%AE%E4%B8%AD%E7%9A%84Content-Type/"/>
    <id>http://yoursite.com/2016/03/12/浅谈HTTP协议中的Content-Type/</id>
    <published>2016-03-12T13:45:54.000Z</published>
    <updated>2018-11-19T14:50:35.659Z</updated>
    
    <content type="html"><![CDATA[<blockquote class="blockquote-center"><p>这周工作中遇到一个奇葩问题，公司IIS服务器下Log日志记录的JSON被转成了乱码，觉得很奇葩是因为我同一套WebService部署了很多遍，为什么其他服务下日志记录的好好的，你就不行，后来仔细观察下，妈个鸡，这不是乱码，他只不过把JSON中一些中文和特殊字符给我转成了Unicode格式，那么问题又回来了，谁让你瞎他瞄转换的(╯°口°)╯(┴—┴！我细细的吸了一口水，发现事情并不简单（背后肯定有着肮脏的PY交易）。最后的原因你肯定也猜到了，就是HTTP协议搞的鬼，既然如此，就再整理一下HTTP协议吧  </p></blockquote><h2 id="协议概述"><a href="#协议概述" class="headerlink" title="协议概述"></a>协议概述</h2><p>HTTP协议是互联网应用最为广泛的网络协议，最初由W3C(万维网协会)发布制定，目前的标准版本是1.1。协议内容非常简单（扶额思考），最初是为了定义客户端与服务端进行交互的标准格式，但由于其移植性太强，现在广泛应用于各种Web应用前后台交互<br>HTTP协议位于TCP/IP协议簇的应用层，直接依赖于处于传输层的TCP协议，所以和TCP类似，处理端对端（进程对进程）通信</p><p>在HTTP 0.9和1.0版本使用的非持续连接，而在1.1后改为持续连接，意味着不必为每个web对象创建一个新的连接，一个连接可以传送多个对象<br><a id="more"></a><br>以下是wiki对HTTP协议的概述</p><blockquote><p>HTTP是一个客户端终端（用户）和服务器端（网站）请求和应答的标准（TCP）。通过使用Web浏览器、网络爬虫或者其它的工具，客户端发起一个HTTP请求到服务器上指定端口（默认端口为80）。我们称这个客户端为用户代理程序（user agent）。应答的服务器上存储着一些资源，比如HTML文件和图像。我们称这个应答服务器为源服务器（origin server）。在用户代理和源服务器中间可能存在多个“中间层”，比如代理服务器、网关或者隧道（tunnel）。</p><p>尽管TCP/IP协议是互联网上最流行的应用，HTTP协议中，并没有规定必须使用它或它支持的层。事实上，HTTP可以在任何互联网协议上，或其他网络上实现。HTTP假定其下层协议提供可靠的传输。因此，任何能够提供这种保证的协议都可以被其使用。因此也就是其在TCP/IP协议族使用TCP作为其传输层。</p><p>通常，由HTTP客户端发起一个请求，创建一个到服务器指定端口（默认是80端口）的TCP连接。HTTP服务器则在那个端口监听客户端的请求。一旦收到请求，服务器会向客户端返回一个状态，比如”HTTP/1.1 200 OK”，以及返回的内容，如请求的文件、错误消息、或者其它信息。</p></blockquote><p>其协议内容分为<strong>请求（Request）</strong>及<strong>响应（Response）</strong>，但两者的格式都是类似的，所以以下按照格式逐级说明</p><h2 id="协议格式"><a href="#协议格式" class="headerlink" title="协议格式"></a>协议格式</h2><p>HTTP协议格式如下：</p><ol><li><p><strong>行</strong>: 包括请求行已经响应行</p><ol><li><p>请求行：包括一个请求最基本的信息，请求方式、请求路径(可选)、以及遵循的协议版本</p><pre><code>格式：[请求方法]SPS[请求路径(可选)]SPS[协议版本]示例：GET /path1/path2/fileName.html HTTP/1.1</code></pre></li><li><p>响应行：包含响应状态以及服务端HTTP版本协议</p><pre><code>格式：[协议版本]SPS[状态码]SPS[状态描述]示例：HTTP/1.1 304 Not Modified</code></pre></li></ol></li></ol><ol><li><p><strong>头</strong>: 包括通用头、请求头、响应头和实体头，代表请求（响应）的各种属性（部分是浏览器、代理主动添加的），以键值队形式保存</p><pre><code>格式：[属性名称]:[属性值]示例: Connection: keep-alive     Accept-Encoding: gzip, deflate, sdch     Accept-Language: zh-CN,zh;q=0.8</code></pre></li><li><p><strong>（空行）</strong> </p></li><li><p><strong>其它消息体（可选）</strong>：通常是PostData</p><h2 id="行"><a href="#行" class="headerlink" title="行"></a>行</h2></li></ol><h3 id="请求行"><a href="#请求行" class="headerlink" title="请求行"></a>请求行</h3><p>这里我要唠叨一下题外话，虽然请求（Request）这个词叫做请求。从请求发起者的角度来看其含义不仅仅是请求，其实她只是表示一个动作的发起，可以是请求，可以是强迫，可以是要求。而如果站在响应方的角度来看，你请求，我不响应你，你要求，我不答应你，这时候也不叫请求了，叫做乞求。所以这个命名是略有歧义的，如果W3C跟我一样是个深度命名强迫症患者，肯定不会起这个名字，但现在也没法改名，因为改名字是很难<a href="https://zh.wikipedia.org/wiki/%E5%90%91%E4%B8%8B%E5%85%BC%E5%AE%B9" title="wiki-向下兼容" target="_blank" rel="noopener">向下兼容</a>的（自己开发中经常遇到名字不准确强行改名，结果踩了一堆雷）</p><p><em>言归正传</em>，请求看起来就像一个<strong>对某某说一个流行动词</strong>，为什么咋么说呢？  </p><p>首先，请求头的请求方式就相当于这个动词，像<strong>下面给你吃</strong>，而请求路径就是某某了；  </p><p>其次，为什么是某某呢，因为这个某某你可能根本就认识啊，什么？认识？我的朋友啊，知道名字就算认识了吗，别忘了你知道人家的<strong>名字</strong>，连<strong>姓</strong>什么都不知道，你这样天真，怎么找的到女朋友！  </p><p>再次，为什么是<strong>流行词</strong>，因为版本号啊，版本高的听的懂版本低的话，但是反之就不行，你对外婆说下面给你吃和对女友说下面给你吃，结果能一样吗？就相当于你和同龄人是一个版本，你们有着共同词汇，但是外婆属于初始版本，你虽然可以理解外婆的话，但外婆不能全部理解你的话（以及行为）(苦笑)</p><h4 id="请求方法"><a href="#请求方法" class="headerlink" title="请求方法"></a>请求方法</h4><p>HTTP规定的<em>请求方法</em>一共有8种，同时规定HTTP服务器至少应该事先GET和HEAD方法，其它方法都是可选的。最常用的是POST和GET。此外，请求方法是可扩展的</p><p>具体请见以下wiki引用</p><blockquote><p>HTTP/1.1协议中共定义了八种方法（也叫“动作”）来以不同方式操作指定的资源：</p><blockquote><p>OPTIONS：这个方法可使服务器传回该资源所支持的所有HTTP请求方法。用’*’来代替资源名称，向Web服务器发送OPTIONS请求，可以测试服务器功能是否正常运作。<br>HEAD：与GET方法一样，都是向服务器发出指定资源的请求。只不过服务器将不传回资源的本文部分。它的好处在于，使用这个方法可以在不必传输全部内容的情况下，就可以获取其中“关于该资源的信息”（元信息或称元数据）。<br>GET：向指定的资源发出“显示”请求。使用GET方法应该只用在读取数据，而不应当被用于产生“副作用”的操作中，例如在Web Application中。其中一个原因是GET可能会被网络蜘蛛等随意访问。参见安全方法<br>POST：向指定资源提交数据，请求服务器进行处理（例如提交表单或者上传文件）。数据被包含在请求本文中。这个请求可能会创建新的资源或修改现有资源，或二者皆有。<br>PUT：向指定资源位置上传其最新内容。<br>DELETE：请求服务器删除Request-URI所标识的资源。<br>TRACE：回显服务器收到的请求，主要用于测试或诊断。<br>CONNECT：HTTP/1.1协议中预留给能够将连接改为管道方式的代理服务器。通常用于SSL加密服务器的链接（经由非加密的HTTP代理服务器）。 </p></blockquote><p>方法名称是区分大小写的。当某个请求所针对的资源不支持对应的请求方法的时候，服务器应当返回状态码405（Method Not Allowed），当服务器不认识或者不支持对应的请求方法的时候，应当返回状态码501（Not Implemented）。</p></blockquote><h4 id="请求路径"><a href="#请求路径" class="headerlink" title="请求路径"></a>请求路径</h4><p>HTTP1.1之后请求路径分为相对和绝对两种形式，如果请求通过代理服务器，则可以使用相对路径</p><h3 id="响应行"><a href="#响应行" class="headerlink" title="响应行"></a>响应行</h3><ul><li>1XX 等待后续请求</li><li>2XX 请求成功</li><li>3XX 重定向</li><li>4XX 客户端错误</li><li>5XX 服务端错误</li></ul><p>状态码和状态详细描述可以参照 <a href="https://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html" target="_blank" rel="noopener">RFC官方文档</a> </p><h2 id="头"><a href="#头" class="headerlink" title="头"></a>头</h2><h3 id="通用头-General-Header"><a href="#通用头-General-Header" class="headerlink" title="通用头(General Header)"></a>通用头(General Header)</h3><p>针对通用头的概念目前很模糊，首先看下官方的解释</p><p><img src="https://cfmyhome-1256032936.cos.ap-shanghai.myqcloud.com/QQ%E6%88%AA%E5%9B%BE20160309162858.png" alt="通用头" title="RFC"></p><p>可以看到官方在HTTP1.1中声明了9个通用头，分别是Cache-Control、Connection、Date、Pragma、Traile、Transfer-Encoding、Upgrade、Via、Warning。通用头必须双方都支持才生效，否则会被接收方当做实体头。如果通信双方都承认的一般头字段，也可以当成(语义上的)通用头。</p><p>从官方文档可以看出，虽然他声明了几个标准通用头，但是通用头的拓展性是非常大的，只要双方承认并使用，就可以当做通用头。实际使用中，像谷歌和火狐的浏览器调试工具都无视了通用头，详见下图。</p><p><img src="https://cfmyhome-1256032936.cos.ap-shanghai.myqcloud.com/QQ%E6%88%AA%E5%9B%BE20160309182535.png" alt="" title="谷歌调试工具Network格式"></p><p><img src="https://cfmyhome-1256032936.cos.ap-shanghai.myqcloud.com/QQ%E6%88%AA%E5%9B%BE20160309182551.png" alt="" title="火狐FirebugNetwork格式"></p><p>谷歌自带的调试工具甚至自己定了一个General，里面放了请求地址，请求方法，响应状态和终端地址</p><p>具体通用头释义戳<a href="http://www.ecdoer.com/post/http-seo.html" target="_blank" rel="noopener">这里</a></p><h3 id="请求头（Request-Header）"><a href="#请求头（Request-Header）" class="headerlink" title="请求头（Request Header）"></a>请求头（Request Header）</h3><p>官方对于请求头的解释</p><p><img src="https://cfmyhome-1256032936.cos.ap-shanghai.myqcloud.com/QQ%E6%88%AA%E5%9B%BE20160311170618.png" alt="" title="RFC HTTP1.1 5.3节"></p><p>网上流传的一段翻译</p><blockquote><p>请求头用于说明是谁或什么在发送请求、请求源于何处，或者客户端的喜好及能力。服务器可以根据请求头部给出的客户端信息，试着为客户端提供更好的响应。请求头域可能包含下列字段Accept、Accept-Charset、Accept- Encoding、Accept-Language、Authorization、From、Host、If-Modified-Since、If-Match、If-None-Match、If-Range、If-Range、If-Unmodified-Since、Max-Forwards、Proxy-Authorization、Range、Referer、User-Agent。对请求头域的扩展要求通讯双方都支持，如果存在不支持的请求头域，一般将会作为实体头域处理。</p></blockquote><p>在HTTP/1.1协议中，所有的请求头，除Host外，都是可选的。请求头种类非常多，还在不断扩展，具体请求头释义戳<a href="http://www.ecdoer.com/post/http-seo.html" target="_blank" rel="noopener">这里</a>或直接浏览<a href="https://tools.ietf.org/html/rfc2616" target="_blank" rel="noopener">RCF HTTP1.1</a></p><h3 id="响应头（Request-Header）"><a href="#响应头（Request-Header）" class="headerlink" title="响应头（Request Header）"></a>响应头（Request Header）</h3><p>官方对于响应头的解释<br><img src="https://cfmyhome-1256032936.cos.ap-shanghai.myqcloud.com/234.png" alt="" title="RFC HTTP1.1 6.2节"><br>网上流传的一段翻译</p><blockquote><p>响应头向客户端提供一些额外信息，比如谁在发送响应、响应者的功能，甚至与响应相关的一些特殊指令。这些头部有助于客户端处理响应，并在将来发起更好的请求。响应头域包含Age、Location、Proxy-Authenticate、Public、Retry- After、Server、Vary、Warning、WWW-Authenticate。对响应头域的扩展要求通讯双方都支持，如果存在不支持的响应头域，一般将会作为实体头域处理。</p></blockquote><p>具体响应头释义戳<a href="http://www.ecdoer.com/post/http-seo.html" target="_blank" rel="noopener">这里</a>或直接浏览<a href="https://tools.ietf.org/html/rfc2616" target="_blank" rel="noopener">RCF HTTP1.1</a></p><h3 id="实体头（Entity-Header）"><a href="#实体头（Entity-Header）" class="headerlink" title="实体头（Entity Header）"></a>实体头（Entity Header）</h3><p>官方对于实体头的解释<br><img src="https://cfmyhome-1256032936.cos.ap-shanghai.myqcloud.com/123.png" alt="" title="RFC HTTP1.1 7.1节"></p><p>网上流传的一段翻译</p><blockquote><p>实体头部提供了有关实体及其内容的大量信息，从有关对象类型的信息，到能够对资源使用的各种有效的请求方法。总之，实体头部可以告知接收者它在对什么进行处理。请求消息和响应消息都可以包含实体信息，实体信息一般由实体头域和实体组成。实体头域包含关于实体的原信息，实体头包括信息性头部Allow、Location，内容头部Content-Base、Content-Encoding、Content-Language、Content-Length、Content-Location、Content-MD5、Content-Range、Content-Type，缓存头部Etag、Expires、Last-Modified、extension-header。</p></blockquote><p>具体实体头释义戳<a href="http://www.ecdoer.com/post/http-seo.html" target="_blank" rel="noopener">这里</a>或直接浏览<a href="https://tools.ietf.org/html/rfc2616" target="_blank" rel="noopener">RCF HTTP1.1</a>，这里只重点介绍一下坑了我一次的Content-Type</p><h4 id="Content-Type"><a href="#Content-Type" class="headerlink" title="Content-Type"></a>Content-Type</h4><p>Content-Type<strong>本来</strong>是用来定义浏览器如何正确对响应流的处理，他是通过响应流的媒体类型来确定的。</p><pre><code>格式： Content-Type: [媒体类型]/[具体格式]   如： Content-Type: image/jpeg</code></pre><p>媒体类型目前是IANA(The Internet Assigned Numbers Authority，互联网数字分配机构)定义的8个大类，分别是：</p><ul><li>application— (比如: application/vnd.ms-excel.)</li><li>audio (比如: audio/mpeg.)</li><li>image (比如: image/png.)</li><li>message (比如,:message/http.)</li><li>model(比如:model/vrml.)</li><li>multipart (比如:multipart/form-data.)</li><li>text(比如:text/html.)</li><li>video(比如:video/quicktime.)</li></ul><p>不同浏览器对于Content-Type的处理方式不能会不同，我引用来一个2010年统计的图作为参考</p><p><img src="https://cfmyhome-1256032936.cos.ap-shanghai.myqcloud.com/231.png" alt=""></p><p>但是现在他的作用不仅仅如此，在常用的HTTP请求模拟工具PostMan和HTTPRequester中都可以看到他的身影</p><p><img src="https://cfmyhome-1256032936.cos.ap-shanghai.myqcloud.com/post.png" alt="" title="PostMan界面"></p><p><img src="https://cfmyhome-1256032936.cos.ap-shanghai.myqcloud.com/987546.png" alt="" title="HTTPRequester界面"></p><p>那么Content-Type在这里究竟起什么作用，笔者搜寻变半天终于找到一个比较满意的答案，当别人无法给你答案时，你只能自己摸索出一个答案。</p><p>以下是博主在<em>Asp.Net WebService</em>环境下使用PostMan做的实验</p><ol><li>Content-Type: Text<br><img src="https://cfmyhome-1256032936.cos.ap-shanghai.myqcloud.com/1111.png" alt=""></li></ol><p><img src="https://cfmyhome-1256032936.cos.ap-shanghai.myqcloud.com/12.png" alt=""></p><ol><li>Content-Type: text/plain<br><img src="https://cfmyhome-1256032936.cos.ap-shanghai.myqcloud.com/21.png" alt=""></li></ol><p><img src="https://cfmyhome-1256032936.cos.ap-shanghai.myqcloud.com/22.png" alt=""></p><ol><li>Content-Type: application/x-www-form-urlencoded<br><img src="https://cfmyhome-1256032936.cos.ap-shanghai.myqcloud.com/31.png" alt=""></li></ol><p><img src="https://cfmyhome-1256032936.cos.ap-shanghai.myqcloud.com/32.png" alt=""></p><ol><li>Content-Type: application/json<br><img src="https://cfmyhome-1256032936.cos.ap-shanghai.myqcloud.com/41.png" alt=""></li></ol><p><img src="https://cfmyhome-1256032936.cos.ap-shanghai.myqcloud.com/42.png" alt=""></p><p><img src="https://cfmyhome-1256032936.cos.ap-shanghai.myqcloud.com/43.png" alt="" title="JSON返回值">   </p><ol><li>Content-Type: application/javascript、application/xml、text/xml、text/html<br>返回：请求格式无效(WebService不支持)</li></ol><p>通过实验可以看出，当PostMan设置Content-Type为Text时，其实Request中是没有Content-Type这一属性的，但是服务端自动解析Content-Type为默认配置（text/plain,utf-8）；当Content-Type为application/x-www-form-urlencoded时，实体在请求发出时就会被转译为unicode格式；但我有一个<strong>疑问</strong>就是为什么Content-Type为application/json时，请求输入流字节长度是正确的，但是转成字符串之后为空串，而且请求实体也绝对没有丢（即图中参数a和参数b）</p><h2 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h2><p>Content-Type为application/x-www-form-urlencoded时，客户端会在请求发出前把实体进行转译，而之所以有些服务下能够正常接收入参大概是因为他们的Content-Type设置为text/plain的缘故。Content-Type这个属性出现在请求头中只是声明实体的格式，让服务端准备好解析手段</p><p>其它属性如果后续有使用到还会继续补充内容</p><h2 id="参照"><a href="#参照" class="headerlink" title="参照"></a>参照</h2><p>HTTP 协议漫谈:<a href="http://blog.jobbole.com/88199/" target="_blank" rel="noopener">http://blog.jobbole.com/88199/</a></p><p>HTTP响应头和请求头信息对照表：<a href="http://tools.jb51.net/table/http_header" target="_blank" rel="noopener">http://tools.jb51.net/table/http_header</a></p><p>RFC 2016 HTTP/1.1:<a href="https://tools.ietf.org/html/rfc2616" target="_blank" rel="noopener">https://tools.ietf.org/html/rfc2616</a></p><p>四种常见的 POST 提交数据方式:<a href="https://imququ.com/post/four-ways-to-post-data-in-http.html" target="_blank" rel="noopener">https://imququ.com/post/four-ways-to-post-data-in-http.html</a></p><p>SodaZhcn的简书-Http协议详解：<a href="http://www.jianshu.com/p/e83d323c6bcc" target="_blank" rel="noopener">http://www.jianshu.com/p/e83d323c6bcc</a></p><p>HTTP头信息解读【SEO必知】：<a href="http://www.ecdoer.com/post/http-seo.html" target="_blank" rel="noopener">http://www.ecdoer.com/post/http-seo.html</a></p><p>yangfch3的笔记 HTTP协议详解：<a href="https://www.zybuluo.com/yangfch3/note/167490" target="_blank" rel="noopener">https://www.zybuluo.com/yangfch3/note/167490</a></p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote class=&quot;blockquote-center&quot;&gt;&lt;p&gt;这周工作中遇到一个奇葩问题，公司IIS服务器下Log日志记录的JSON被转成了乱码，觉得很奇葩是因为我同一套WebService部署了很多遍，为什么其他服务下日志记录的好好的，你就不行，后来仔细观察下，妈个鸡，这不是乱码，他只不过把JSON中一些中文和特殊字符给我转成了Unicode格式，那么问题又回来了，谁让你瞎他瞄转换的(╯°口°)╯(┴—┴！我细细的吸了一口水，发现事情并不简单（背后肯定有着肮脏的PY交易）。最后的原因你肯定也猜到了，就是HTTP协议搞的鬼，既然如此，就再整理一下HTTP协议吧  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;协议概述&quot;&gt;&lt;a href=&quot;#协议概述&quot; class=&quot;headerlink&quot; title=&quot;协议概述&quot;&gt;&lt;/a&gt;协议概述&lt;/h2&gt;&lt;p&gt;HTTP协议是互联网应用最为广泛的网络协议，最初由W3C(万维网协会)发布制定，目前的标准版本是1.1。协议内容非常简单（扶额思考），最初是为了定义客户端与服务端进行交互的标准格式，但由于其移植性太强，现在广泛应用于各种Web应用前后台交互&lt;br&gt;HTTP协议位于TCP/IP协议簇的应用层，直接依赖于处于传输层的TCP协议，所以和TCP类似，处理端对端（进程对进程）通信&lt;/p&gt;
&lt;p&gt;在HTTP 0.9和1.0版本使用的非持续连接，而在1.1后改为持续连接，意味着不必为每个web对象创建一个新的连接，一个连接可以传送多个对象&lt;br&gt;
    
    </summary>
    
    
      <category term="学习笔记" scheme="http://yoursite.com/tags/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
      <category term="HTTP协议" scheme="http://yoursite.com/tags/HTTP%E5%8D%8F%E8%AE%AE/"/>
    
  </entry>
  
  <entry>
    <title>Markdown 语法实例</title>
    <link href="http://yoursite.com/2016/02/28/Markdown%20%E8%AF%AD%E6%B3%95%E5%AE%9E%E4%BE%8B/"/>
    <id>http://yoursite.com/2016/02/28/Markdown 语法实例/</id>
    <published>2016-02-28T08:20:05.000Z</published>
    <updated>2018-11-19T14:50:38.309Z</updated>
    
    <content type="html"><![CDATA[<h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>Markdown 是一种轻量级标记语言，创始人为<em>John Gruber</em>，其特点是格式简单，源文件容易阅读和编辑。适合撰写笔记，使作者的注意力集中于内容而非形式。</p><p>真正的论述是不需要花哨的形式的，当对于当前主流的富编辑器来说，Markdown只保留了基本的格式定义以及函数计算，以下介绍Markdown基础语法。</p><a id="more"></a><h2 id="基本语法"><a href="#基本语法" class="headerlink" title="基本语法"></a>基本语法</h2><h3 id="标题"><a href="#标题" class="headerlink" title="标题"></a>标题</h3><p>标题格式有两种形式：  </p><ol><li>Atx方式–通过在[标题内容]前输入特定数量的井号<code>#</code>来实现<br><img src="https://cfmyhome-1256032936.cos.ap-shanghai.myqcloud.com/QQ%E6%88%AA%E5%9B%BE20160228160359.png?imageView2/2/w/900/h/600" alt="Atx方式"></li><li>Setext方式–通过底线，利用<code>=</code>(最高阶标题)和<code>-</code>(第二阶标题)  </li></ol><p><code>一级标题</code><br><code>=============</code><br><code>二级标题</code><br><code>-------------</code>  </p><h3 id="段落和换行"><a href="#段落和换行" class="headerlink" title="段落和换行"></a>段落和换行</h3><p>一个Markdown段落是有一个或多个连续的文本行组成，他的前后要有一个以上的空行  </p><blockquote><p>「由一个或多个连续的文本行组成」这句话其实暗示了 Markdown 允许段落内的强迫换行（插入换行符），这个特性和其他大部分的 text-to-HTML 格式不一样（包括 Movable Type 的「Convert Line Breaks」选项），其它的格式会把每个换行符都转成 <code>&lt;br /&gt;</code>标签  </p></blockquote><p>Markdown的换行方式比较特殊，在编辑页面一般情况下的回车会被Markdown无视，如果想要换行需要在段落最后输入两个以上的空格，但在部分特殊字符后面回车还是有效的，比如标题表示#后面不需要空格。</p><h3 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h3><ol><li><p>单行引用<br> 在每行前面加入<code>&gt;</code>即可以实现，效果如下</p><blockquote><p>这是一个单行引用  </p></blockquote></li><li><p>多行引用<br> 可以用单行引用模式实现，只需要在每行前面加入<code>&gt;</code>，效果如下  </p><blockquote><p>这是多行引用第一行<br>这是多行引用第二行  </p></blockquote><p> 同时Markdown也提供了一种人性化(偷懒)模式，对于已经输入好的段落可以只在第一行最前端加入<code>&gt;</code>，效果如下</p><blockquote><p>这个一个段落这个一个段落这个一个段落这个一个段落这个一个段落这个一个段落这个一个段落这个一个段落这个一个段落</p></blockquote></li><li><p>嵌套引用<br> 想要实现引用的引用，只需根据层次加上不同数量的<code>&gt;</code>，效果如下</p><blockquote><p>第一层第一个引用</p><blockquote><p>第二层引用</p></blockquote><p>第一层第二个引用</p><h3 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h3><p>Markdown遵照国际惯例，提供有序和无序两种列表，无论是有序还是无序都是在行前加入标识符<br>无序列表支持三种形式的标识符，分别是<code>*</code>、<code>+</code>、<code>-</code><br>有序列表则使用【数字】+【英文据点】+【空格】<br>嵌套列表则在首行缩进，方式和嵌套引用雷同，不再赘述</p></blockquote></li></ol><h3 id="代码块"><a href="#代码块" class="headerlink" title="代码块"></a>代码块</h3><p>由于Markdown写作内容通常是和程序相关的，通常这些块我们不希望程序去按照一般格式排版和转译，只想要他原来的样子。<br>要在Markdown建立代码块，需要要在行首缩进4个空格或一个制表符(Tab)就可以实现。 </p><p>我是一个普通段落  </p><pre><code>printf(&quot;大家好，我是一个代码块&quot;)    printf(&quot;尽管我的格式很丑&quot;)        printf(&quot;但请不要把我格式化&quot;)            printf(&quot;就让我一直丑下去吧&quot;)</code></pre><p>需要注意的是代码块前必须要换行空出一行，不然Markdown会把它当做上一个段落的后续，就会变成这样  </p><p>我是一个普通段落<br>    printf(“大家好，我是一个代码块”)<br>        printf(“尽管我的格式很丑”)<br>            printf(“但请不要把我格式化”)<br>                printf(“就让我一直丑下去吧”)</p><h3 id="强调"><a href="#强调" class="headerlink" title="强调"></a>强调</h3><p>Markdown强调分为两级，第一级是<em>斜体</em>，第二级是<strong>粗体</strong>，标识符是<code>*</code>或者<code>_</code>，使用方式很简单只需要用标识符包住强调内容</p><pre><code>*single asterisks*_single underscores_**double asterisks**__double underscores__</code></pre><p><em>single asterisks</em></p><p><em>single underscores</em></p><p><strong>double asterisks</strong></p><p><strong>double underscores</strong></p><p><strong>注意</strong>：如果你的<code>*</code>或者<code>_</code>前后有空格的话，他们就会被当做普通符号；如果你想在文字插入普通的<code>*</code>和<code>_</code>，请在其前面加入<code>\</code>进行转译</p><h3 id="链接"><a href="#链接" class="headerlink" title="链接"></a>链接</h3><p>Markdown 支持以比较简短的自动链接形式来处理网址和电子邮件信箱，只要是用尖括号包起来， Markdown 就会自动把它转成链接。一般网址的链接文字就和链接地址一样，例如：</p><pre><code>&lt;http://www.baidu.com/&gt;</code></pre><p>会变成</p><p><a href="http://www.baidu.com/" target="_blank" rel="noopener">http://www.baidu.com/</a></p><p>如果想要把链接文字转换，需要按照如下格式</p><pre><code>[链接文字](url &quot;链接说明&quot;)[百度](http:www.baidu.com &quot;百度一下&quot;)</code></pre><p><a href="http:www.baidu.com" title="百度一下,你就知道" target="_blank" rel="noopener">百度</a></p><p>如果你觉得在同一个段落输入多个链接很丑，不够直观，比如下面</p><pre><code>这是[百度](http:www.baidu.com &quot;百度一下,你就知道&quot;)，这是[谷歌](https:www.google.com )</code></pre><p>可以按照另一种形式实现</p><pre><code>这是[百度][1]，这是[谷歌][2][1]:http:www.baidu.com &quot;百度一下,你就知道&quot;[2]:https://www.google.com </code></pre><p>其结果是一样的，如下<br>这是<a href="http://www.baidu.com" title="百度一下,你就知道" target="_blank" rel="noopener">百度</a>，这是<a href="https://www.google.com" target="_blank" rel="noopener">谷歌</a></p><h3 id="图片链接"><a href="#图片链接" class="headerlink" title="图片链接"></a>图片链接</h3><p>Markdown图片链接实现方式基本完全一样，唯一要注意的是在前面加一个<code>!</code>表示图片，如下</p><pre><code>![GitHub Mark](http://github.global.ssl.fastly.net/images/modules/logos_page/GitHub-Mark.png &quot;GitHub Mark&quot;)</code></pre><p><img src="http://github.global.ssl.fastly.net/images/modules/logos_page/GitHub-Mark.png" alt="GitHub Mark" title="GitHub Mark"></p><p>如果你想对图片进行裁剪缩放的话，目前各个图床基本都有实现接口，比如七牛，详情戳<a href="http://developer.qiniu.com/docs/v6/api/reference/fop/image/imageview2.html" target="_blank" rel="noopener">七牛API</a></p><h3 id="分隔线"><a href="#分隔线" class="headerlink" title="分隔线"></a>分隔线</h3><p>你可以在一行中用三个以上的星号、减号、底线来建立一个分隔线，行内不能有其他东西。你也可以在星号或是减号中间插入空格。下面每种写法都可以建立分隔线：</p><pre><code>* * *********- - ----------------------------------------</code></pre><h3 id="代码标记"><a href="#代码标记" class="headerlink" title="代码标记"></a>代码标记</h3><p>如果要标记一小段行内代码，请使用 <code>`</code>(反引号)包住标记内容，那如果你想要标记 <code>`</code>(反引号)的话，请使用 <code>`` ` ``</code>实现，如果你想要标记<code>`` ` ``</code>的话，请使用<code>``` `` ` ``  ```</code>，依次类推</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>关于Markdown我自己也是初学，但是因为其语法比较简单，基本20分钟就入门，之后随便写点什么，非常容易掌握，这篇博文就是我用来熟练Markdown用的，当然也作为自己的一个参考，之后也会不断更新新的内容吧，如果有疑问，请在评论区提出。</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><blockquote><p>[Markdown-维基百科] <a href="https://zh.wikipedia.org/zh-cn/Markdown" target="_blank" rel="noopener">https://zh.wikipedia.org/zh-cn/Markdown</a><br>[Markdown 语法说明] <a href="http://wowubuntu.com/markdown/" target="_blank" rel="noopener">http://wowubuntu.com/markdown/</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;概述&quot;&gt;&lt;a href=&quot;#概述&quot; class=&quot;headerlink&quot; title=&quot;概述&quot;&gt;&lt;/a&gt;概述&lt;/h2&gt;&lt;p&gt;Markdown 是一种轻量级标记语言，创始人为&lt;em&gt;John Gruber&lt;/em&gt;，其特点是格式简单，源文件容易阅读和编辑。适合撰写笔记，使作者的注意力集中于内容而非形式。&lt;/p&gt;
&lt;p&gt;真正的论述是不需要花哨的形式的，当对于当前主流的富编辑器来说，Markdown只保留了基本的格式定义以及函数计算，以下介绍Markdown基础语法。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Markdown" scheme="http://yoursite.com/tags/Markdown/"/>
    
      <category term="学习笔记" scheme="http://yoursite.com/tags/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
</feed>
